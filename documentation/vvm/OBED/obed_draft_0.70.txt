+---------------------------------------+
|               OBED VM                 |
|                                       |
|  OBject/Event Driven Virtual Machine  |
|                                       |
|          February 22, 2014            |
|             Draft 0.70                |
|          by Rick C. Hodgin            |
|                                       |
|  Released as the Go-Forward prototype |
|  for the mechancis of the VVM engine. |
|  In prayer (much prayer)... -RCH      |
+----------------------------------------

+---------------------------------------+
|  A request in prayer, through faith   |
|---------------------------------------|
| May the Lord, Jesus Christ, bless the |
| work of my hands on this project, as  |
| I give all credit, honor, and glory   |
| to Him.  Amen.                        |
|---------------------------------------|
| May the Lord, Jesus Christ, bless the |
| work of all hands on this project, as |
| we give all credit, honor, and glory  |
| to Him.  Amen.                        |
+---------------------------------------+




Object/Event Driven Virtual Machine (OBED)
------------------------------------------

The machine boots up with a memory buffer beginning at offset 0.  Instantiates with a single
program object, which points to an initial environment.  This program was previously compiled
for operation on the OBED VM.  It is a BXML file that contains specific information for loading
into the OBED VM.


VARIABLE DEFINITIONS
--------------------
All OBED variables names are prefixed during compilation with a four-character sequence
identifying their type and locality.  These do not affect their relationship to outside-
facing variable names, but are used internally for processing.

The format conveys two parts, XYYY.

EXAMPLE:  p,l,g,t,v,r		-- Parameter, Local, Global, Thread global, Private, Return
          s08,s16,s32,s64	-- Signed 8-bit, 16-bit, 32-bit, and 64-bit
          u08,u16,u32,u64	-- Unsigned 8-bit, 16-bit, 32-bit, and 64-bit
          f32,f64			-- Floating point, 32-bit, 64-bit
		  bni				-- Bignum integer
		  bnf				-- Bignum floating point

NOTE:  These are defined in the code executed on the VM.  The debugger environment has
       settings which allow this naming convention to be hidden, 
       An example of a simplified variable name:
	   
              OBED VM sees:     ls64Foo
			
              In the debugger:  foo
			               Or:  lnFoo

						   
Global Objects Visible in the Debugger
--------------------------------------
	The object structure is given by the natural hierarchy which is visible in the VVM structs.  Refer to the vvm_structs.png
	image for the relationship between structs.
// TODO:  Create this vvm_structs.png image once the structures settle down. :-)


Relative Pathnames
------------------
The VVM creates an isolated virtual environment, and supports a
home folder location that can always be identified within a pathname
as "//" followed by the relative portion.  This makes "//" its "root"
directory.  In this way, migrating suspended VVM instances from one
machine to another, or one session to another, allows their data
connections to persist, even if suspended and resumed later.


Dynamic Snippets
----------------
Dynamic Snippets exist as two distinct types.  One is for external definition.
The other is for support of edit-and-continue.

(1) The first is something most developers will be familiar with.
It specifies the interface parameters in communicating with an
external DLL.  It is the prototype definition that is created in
the VVM, so that the VVM calls the appropriate dynamic snippet,
which then forwards on to the external DLL.  And, upon return,
based upon the return parameter(s), it translates information
from the DLL into VVM-specific variables.

(2) The VVM supports an edit-and-continue ABI, and this is how it
is implemented.  Initially (at the time of first compile), an
actual snippet is created.  However, if that snippet is replaced
in the debugger during runtime, a dynamic snippet takes its place.
A "forward pointer" from the snippet indicates which dynamic
snippet should be run in its place.  And with each subsequent
change either the dynamic snippet is updated (depending on the
nature of the change), or it is supplanted by a new dynamic
snippet with the previous one being moved into an anchor history
list if required.


Datum
------
	A Datum is the lowest-level primitive form for storing data.
	It is the root item used on every object, as each object
	reference has a name and associated data.  Both the name and
	the data are stored as Datums.  Every data has a name, and
	name length, and a data, and data length.  There is also a
	Datum2 which allows a "logical size" to be created, which
	is not allocated, but indicates a maximum that can be allocated.

	
Object
------
	Every variable is an object.
	Every object is a container.
	Every object has a next and prev to siblings.
	Every object has a parent and child for lineage.

	
Memory
------
	All memory is linear per program.  No paging.  No mechanical swapping to disk.  So far as the VVM programs
	are concerned, there is an unlimited 64-bit flat memory area which extends from 0 upward.
	
	Memory is initially allocated beginning at offset 0 for some size (a VVM instance setting, minimum of 4MB).
	The VVM can launch paused with no program running.  From there, prior saved sessions can be restored, or
	programs can be loaded manually and run.
	
	Each program has a main, and it begins running at that location.  Every suspended and resumed process will
	maintain its last executing line, and will continue on from there upon resumption.  Only those functions
	which are not tagged (|NOSUSPEND|) can be suspended in.

	Various fixed internal objects are maintained outside of the main memory area of the VVM.  Facilities are
	provided to allow those external features to allocate memory in a special area that is reserved by the
	VVM for saving and restoring across sessions.

	Every object has members which are accessed through a VVM API.  This allows the VVM to maintain additional
	necessary items which are used for speedups, or other purposes, yet without influencing the nature of the
	object.


Edit-and-continue
-----------------
	The VVM also allows the code stream to be intermixed with non-VVM code running on the native CPU.  As of
	the 0.70 draft revision, plans are for x86 and ARM support.  The integrated compiler allows for edit-and-
	continue on all supported CPU architectures.  Anything that exists outside of the snippet nature of the
	VVM, x86, or ARM, can only be viewed in disassembly mode, and edited by changing opcodes as through the
	assembler.  These changes, at present, cannot persist beyond current execution.

	All VVM, x86, and ARM snippets, and any corresponding dynamic snippets, support full edit-and-continue.
	Every line of code can be edited and changes applied on a running VVM instance.  Any thread currently
	executing code in a snippet being updated will be suspended, the change applied, and if the source line
	in operation will not be affected by the change, continued, otherwise the thread will be suspended so a
	developer can determine through the debugger on which line to proceed.
	

VVM Registers
------------------------------------------
	All registers are accessed via offset within the register space.  There are no fixed locations which
	represent certain types of registers.  However, there are logical forms which are used in the VVM
	assembly language, which relate to common locations.  However, any offset can be used as input for
	any instruction.
	
	The result from every operation is always stored at offset 0 in register space, typically clobbering
	up to the first 64-bits, or 8-bytes.

	OFFSET		CODE	INTEGER REGISTERS
	------		----	-----------------
	+000		n/a		RESULT						; All computed results are returned here
	264 bytes			Full register space begins at 0..255 and proceeds up for 8 bytes

	
	Note:  The following are shorthand names to explicit offsets, which can make reading assembly easier.
	
	OFFSET		INTEGER Register Alias Names
	------		----------------------------
	+008		A8		A16		A32		A64		eax		rax		; x86 name relates to A32 and A64
	+016		B8		B16		B32		B64		ebx		rbx		; x86 name relates to B32 and B64
	+024		C8		C16		C32		C64		ecx		rcx		; x86 name relates to C32 and C64
	+032		D8		D16		D32		D64		edx		rdx		; x86 name relates to D32 and D64
	+040		E8		E16		E32		E64		esi		rsi		; x86 name relates to E32 and E64
	+048		F8		F16		F32		F64		edi		rdi		; x86 name relates to F32 and F64
	+056		G8		G16		G32		G64		
	+064		H8		H16		H32		H64
	+072		I8		I16		I32		I64
	+080		J8		J16		J32		J64
	+088		K8		K16		K32		K64
	+096		L8		L16		L32		L64
	+104		M8		M16		M32		M64
	+112		N8		N16		N32		N64
	+120		O8		O16		O32		A64
	+128		P8		P16		P32		P64
	            
	OFFSET		FLOATING POINT Register Alias Names
	------		-----------------------------------
	+136		FA32	FA64	st0		xmm0		; x86 names relate to 64-bit IEEE forms only
	+144		FB32	FB64	st1		xmm1		; x86 names relate to 64-bit IEEE forms only
	+152		FC32	FC64	st2		xmm2		; x86 names relate to 64-bit IEEE forms only
	+160		FD32	FD64	st3		xmm3		; x86 names relate to 64-bit IEEE forms only
	+168		FE32	FE64	st4		xmm4		; x86 names relate to 64-bit IEEE forms only
	+176		FF32	FF64	st5		xmm5		; x86 names relate to 64-bit IEEE forms only
	+184		FG32	FG64	st6		xmm6		; x86 names relate to 64-bit IEEE forms only
	+192		FH32	FH64	st7		xmm7		; x86 names relate to 64-bit IEEE forms only
	+200		FI32	FI64	st8		xmm8		; x86 names relate to 64-bit IEEE forms only
	+208		FJ32	FJ64	st9		xmm9		; x86 names relate to 64-bit IEEE forms only
	+216		FK32	FK64	st10	xmm10		; x86 names relate to 64-bit IEEE forms only
	+224		FL32	FL64	st11	xmm11		; x86 names relate to 64-bit IEEE forms only
	+232		FM32	FM64	st12	xmm12		; x86 names relate to 64-bit IEEE forms only
	+240		FN32	FN64	st13	xmm13		; x86 names relate to 64-bit IEEE forms only
	+248		FO32	FO64	st14	xmm14		; x86 names relate to 64-bit IEEE forms only
	+256		FP32	FP64	st15	xmm15		; x86 names relate to 64-bit IEEE forms only

	Other registers (accessible only by special instructions)
	---------------------------------------------------------
	+264		FLAGS			- FLAGS
	+272		IP				- INSTRUCTION POINTER
	+280		SP				- STACK POINTER (SP always points to the next slot to push to, so last pushed is SP-4 or SP-8)
	
	+288		SNIP			- CURRENTLY SNIPPET NUMBER EXECUTING
	+296		EXSNIP			- SNIPPET ID NUMBER TO BRANCH TO ON EXCEPTION
	+304		ERROR			- THE MACHINE OPCODE ERROR GENERATED DURING EXECUTION (SNIP:IP IS POINTING TO OFFENDING INSTRUCTION)
	
	+312		PRED			- PREDICATE FLAG SETTING, LOWER 24-BITS USED, 64-BITS STORAGE
	+320		PREDCOUNT		- PREDICATE COUNT
	
	+328		Nuserved
	+336		Nuserved
	+344		Nuserved
	+352		Nuserved
	+360		Nuserved
	+368		Nuserved
	+376		Nuserved
	+384		Nuserved
	+392		Nuserved


FLAGS (64-bits, lower 24-bits are currently defined, the rest are nuserved)
------------------------------------------------------------------------------
    ........ ........ ........ ........ ........ 00000000 00000000 00000001   - CARRY?
    ........ ........ ........ ........ ........ 00000000 00000000 00000010   - OVERFLOW?
    ........ ........ ........ ........ ........ 00000000 00000000 00000100   - UNDERFLOW?
    ........ ........ ........ ........ ........ 00000000 00000000 00001000   - EQUAL?
    ........ ........ ........ ........ ........ 00000000 00000000 00010000   - ZERO?
    ........ ........ ........ ........ ........ 00000000 00000000 00100000   - NEGATIVE?
    ........ ........ ........ ........ ........ 00000000 00000000 01000000   - POSITIVE?
    ........ ........ ........ ........ ........ 00000000 00000000 10000000   - APP  - (aka APP0) AVAILABLE TO APPLICATION

    ........ ........ ........ ........ ........ 00000000 00000001 00000000   - APP1 - AVAILABLE TO APPLICATION
    ........ ........ ........ ........ ........ 00000000 00000010 00000000   - APP2 - AVAILABLE TO APPLICATION
    ........ ........ ........ ........ ........ 00000000 00000100 00000000   - APP3 - AVAILABLE TO APPLICATION
    ........ ........ ........ ........ ........ 00000000 00001000 00000000   - APP4 - AVAILABLE TO APPLICATION
    ........ ........ ........ ........ ........ 00000000 00010000 00000000   - APP5 - AVAILABLE TO APPLICATION
    ........ ........ ........ ........ ........ 00000000 00100000 00000000   - APP6 - AVAILABLE TO APPLICATION
    ........ ........ ........ ........ ........ 00000000 01000000 00000000   - APP7 - AVAILABLE TO APPLICATION
    ........ ........ ........ ........ ........ 00000000 10000000 00000000   - APP8 - AVAILABLE TO APPLICATION
	
    NOTE:  THERE ARE NO INSTRUCTIONS WHICH DIRECTLY AFFECT THESE REGISTERS.
           THEY ARE SET/CLEARED BY THE DEBUGGER, OR BY THE RUNTIME EXECUTION ENGINE.
    ........ ........ ........ ........ ........ 00000001 00000000 00000000   - IS_SUSPENDED?
    ........ ........ ........ ........ ........ 00000010 00000000 00000000   - IN_ERROR?
    ........ ........ ........ ........ ........ 00000100 00000000 00000000   - SINGLE_STEP?
    ........ ........ ........ ........ ........ 00001000 00000000 00000000   - DEBUG1_IS_ACTIVE?
    ........ ........ ........ ........ ........ 00010000 00000000 00000000   - DEBUG2_IS_ACTIVE?
    ........ ........ ........ ........ ........ 00100000 00000000 00000000   - DEBUG3_IS_ACTIVE?
    ........ ........ ........ ........ ........ 01000000 00000000 00000000   - DEBUG4_IS_ACTIVE?
    ........ ........ ........ ........ ........ 10000000 00000000 00000000   - EXTENDED_DEBUG_IS_ACTIVE?
	


PRED (64-bits, only lower 32-bits are currently defined and used, the upper 32-bits are nuserved)
-------------------------------------------------------------------------------------------------
    THESE VALUES BEING SET HAVE NO EFFECT ON VVM-CPU PROCESSING UNLESS THEIR CORRESPONDING "IS THIS A TEST?"
	BITS ARE SET BELOW, AND PREDCOUNT IS > 0
	
    ........ ........ ........ ........ 00000000 00000000 00000000 00000001   - CARRY?
    ........ ........ ........ ........ 00000000 00000000 00000000 00000010   - OVERFLOW?
    ........ ........ ........ ........ 00000000 00000000 00000000 00000100   - UNDERFLOW?
    ........ ........ ........ ........ 00000000 00000000 00000000 00001000   - EQUAL?
    ........ ........ ........ ........ 00000000 00000000 00000000 00010000   - ZERO?
    ........ ........ ........ ........ 00000000 00000000 00000000 00100000   - NEGATIVE?
    ........ ........ ........ ........ 00000000 00000000 00000000 01000000   - POSITIVE?
    ........ ........ ........ ........ 00000000 00000000 00000000 10000000   - APP  - (aka APP0) AVAILABLE TO APPLICATION
    ........ ........ ........ ........ 00000000 00000000 00000001 00000000   - APP1 IS SET
    ........ ........ ........ ........ 00000000 00000000 00000010 00000000   - APP2 IS SET
    ........ ........ ........ ........ 00000000 00000000 00000100 00000000   - APP3 IS SET
    ........ ........ ........ ........ 00000000 00000000 00001000 00000000   - APP4 IS SET
    ........ ........ ........ ........ 00000000 00000000 00010000 00000000   - APP5 IS SET
    ........ ........ ........ ........ 00000000 00000000 00100000 00000000   - APP6 IS SET
    ........ ........ ........ ........ 00000000 00000000 01000000 00000000   - APP7 IS SET
    ........ ........ ........ ........ 00000000 00000000 10000000 00000000   - APP8 IS SET

    THESE VALUES CAN ONLY BE TESTED FOR THEIR SET (1) CONDITION, IF 0 IGNORED:	
    ........ ........ ........ ........ 00000000 00000001 00000000 00000000   - CARRY?		Is this bit to be tested?
    ........ ........ ........ ........ 00000000 00000010 00000000 00000000   - OVERFLOW?	Is this bit to be tested?
    ........ ........ ........ ........ 00000000 00000100 00000000 00000000   - UNDERFLOW?	Is this bit to be tested?
    ........ ........ ........ ........ 00000000 00001000 00000000 00000000   - EQUAL?		Is this bit to be tested?
    ........ ........ ........ ........ 00000000 00010000 00000000 00000000   - ZERO?		Is this bit to be tested?
    ........ ........ ........ ........ 00000000 00100000 00000000 00000000   - NEGATIVE?	Is this bit to be tested?
    ........ ........ ........ ........ 00000000 01000000 00000000 00000000   - POSITIVE?	Is this bit to be tested?
    ........ ........ ........ ........ 00000000 10000000 00000000 00000000   - APP?		Is this bit to be tested?
    ........ ........ ........ ........ 00000001 00000000 00000000 00000000   - APP1?		Is this bit to be tested?
    ........ ........ ........ ........ 00000010 00000000 00000000 00000000   - APP2?		Is this bit to be tested?
    ........ ........ ........ ........ 00000100 00000000 00000000 00000000   - APP3?		Is this bit to be tested?
    ........ ........ ........ ........ 00001000 00000000 00000000 00000000   - APP4?		Is this bit to be tested?
    ........ ........ ........ ........ 00010000 00000000 00000000 00000000   - APP5?		Is this bit to be tested?
    ........ ........ ........ ........ 00100000 00000000 00000000 00000000   - APP6?		Is this bit to be tested?
    ........ ........ ........ ........ 01000000 00000000 00000000 00000000   - APP7?		Is this bit to be tested?
    ........ ........ ........ ........ 10000000 00000000 00000000 00000000   - APP8?		Is this bit to be tested?
	NOTE:  PRED REMAINS STICKY AFTER PREDCOUNT REACHES ZERO, can be re-used.  See PREDIMPORT instruction for
	       population on subsequent uses.


GENERAL INSTRUCTION FORMAT
--------------------------
	[4:PREDICATE]			- OPTIONAL, DEPENDING ON PREDCOUNT > 0
	[8:OPCODE]				- See \libsf\documentation\vvm\OBED\obed_draft_0.70.assembly_instructions.txt
	[4:PARAM1]				- OPTIONAL, DEPENDING ON INSTRUCTION
	[4:PARAM2]				- OPTIONAL, DEPENDING ON INSTRUCTION
	[N:IMMEDIATES]			- OPTIONAL, DEPENDING ON INSTRUCTION


INSTRUCTION FORMAT
------------------
[4:PREDICATE] PRECEDES EVERY OPCODE WHEN PREDCOUNT > 0
	0000	- NOT PREDICATED
	0001	- CARRY?
	0010	- EQUAL?
	0100	- ZERO?
	1000	- UNDERFLOW?
	1001	- OVERFLOW?
	1010	- NEGATIVE?
	1011	- POSITIVE?
	1100	- CARRY? AND NEGATIVE?
	1101	- CARRY? AND POSITIVE?
	1110	- OVERFLOW? OR UNDERFLOW?
	1111	- APP?
	
[12:EXTENDED PREDICATE, IMMEDIATE VALUES FOR "PREDICATE" ASSEMBLY INSTRUCTION]
	none are currently defined
	
[4:PARAM1][4:PARAM2]
	0000	IMM8				[8 BIT IMMEDIATE]
	0001	IMM32				[32 BIT IMMEDIATE]
	0010	SP[REGISTER]		[8:OFFSET]
	0011	SP[REGISTER+IMM32]	[8:OFFSET][32:IMMEDIATE]
	
	0100	REG					[8:OFFSET]
	0101	REG+REG				[8:OFFSET][8:OFFSET]
	
	0110	GLOBAL				[32:NUMBER]
	0111	THREADGLOBAL		[32:NUMBER]
	1000	PARAM				[8:NUMBER]
	1001	RETURN				[8:NUMBER]
	1010	LOCAL				[32:NUMBER]
	
	1011	RESULT
	
	1100	[REG+REG]			[8:OFFSET][8:OFFSET]
	1101	[REG+IMM8]			[8:OFFSET][8:IMMEDIATE SIGN EXTENDED TO 64-BITS]
	1110	[REG+IMM16]			[8:OFFSET][16:IMMEDIATE SIGN EXTENDED TO 64-BITS]
	1111	[REG+IMM32]			[8:OFFSET][32:IMMEDIATE SIGN EXTENDED TO 64-BITS]

	
[8:INSTRUCTION] - INSTRUCTION SET (OPCODE BYTE VALUES TO BE DEFINED LATER)
	* NOTE:  REFER TO OBED_DRAFT_0.70.ASSEMBLY_INSTRUCTIONS.TXT FOR EXPLICIT ENCODINGS AND SYNTAX OF EACH OPCODE
	11111111	- EXTENDED INSTRUCTION BYTE FOLLOWS (TO BE DEFINED / ADDED LATER)
				EXAMPLES:
					SIN, COS, TAN
					ASIN, ACOS, ATAN
					SQUARE, SQRT, ROUND


DEBUGGER API
------------
	* See \libsf\vvm\core\common\common_vvm.h for the debugger interface.
