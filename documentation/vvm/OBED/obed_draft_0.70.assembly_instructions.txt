+---------------------------------------+
|               OBED VM                 |
|                                       |
|  OBject/Event Driven Virtual Machine  |
|  Assembly Language Opcode Definition  |
|                                       |
|             Feb.22.2014               |
|             Draft 0.70                |
|          by Rick C. Hodgin            |
|                                       |
|  Released as the Go-Forward prototype |
|  for the mechanics of the VVM engine. |
|  In prayer (much prayer)... -RCH      |
+----------------------------------------

+---------------------------------------+
|  A request in prayer, through faith   |
|---------------------------------------|
| May the Lord, Jesus Christ, bless the |
| work of my hands on this project, as  |
| I give all credit, honor, and glory   |
| to Him.  Amen.                        |
|---------------------------------------|
| May the Lord, Jesus Christ, bless the |
| work of all hands on this project, as |
| we give all credit, honor, and glory  |
| to Him.  Amen.                        |
+---------------------------------------+




[8:INSTRUCTION] - INSTRUCTION SET (OPCODE BYTE VALUES TO BE DEFINED LATER)

	; Unsigned add
	0		- add.u64 [param1] to [param2]
	1		- add.u32 [param1] to [param2]
	2		- add.u16 [param1] to [param2]
	3		- add.u8 [param1] to [param2]
	
	; Unsigned subtract
	4		- sub.u64 [param1] from [param2]
	5		- sub.u32 [param1] from [param2]
	6		- sub.u16 [param1] from [param2]
	7		- sub.u8 [param1] from [param2]
    
	; Unsigned multiply
	8		- mul.u64 [param1] by [param2]
	9		- mul.u32 [param1] by [param2]
	10		- mul.u16 [param1] by [param2]
	11		- mul.u8 [param1] by [param2]
    
	; Unsigned divide
	12		- div.u64 [param1] by [param2]
	13		- div.u32 [param1] by [param2]
	14		- div.u16 [param1] by [param2]
	15		- div.u8 [param1] by [param2]
    
	; Unsigned compare
	16		- comp.u64 [param1] to [param2]
	17		- comp.u32 [param1] to [param2]
	18		- comp.u16 [param1] to [param2]
	19		- comp.u8 [param1] to [param2]
    
	; Signed add
	20		- add.f64 [param1] to [param2]
	21		- add.f32 [param1] to [param2]
	22		- add.s64 [param1] to [param2]
	23		- add.s32 [param1] to [param2]
	24		- add.s16 [param1] to [param2]
	25		- add.s8 [param1] to [param2]
    
	; Signed subtract
	26		- sub.f64 [param1] from [param2]
	27		- sub.f32 [param1] from [param2]
	28		- sub.s64 [param1] from [param2]
	29		- sub.s32 [param1] from [param2]
	30		- sub.s16 [param1] from [param2]
	31		- sub.s8 [param1] from [param2]
    
	; Signed multiply
	32		- mul.f64 [param1] by [param2]
	33		- mul.f32 [param1] by [param2]
	34		- mul.s64 [param1] by [param2]
	35		- mul.s32 [param1] by [param2]
	36		- mul.s16 [param1] by [param2]
	37		- mul.s8 [param1] by [param2]
    
	; Signed divide
	38		- div.f64 [param1] by [param2]
	39		- div.f32 [param1] by [param2]
	40		- div.s64 [param1] by [param2]
	41		- div.s32 [param1] by [param2]
	42		- div.s16 [param1] by [param2]
	43		- div.s8 [param1] by [param2]
    
	; Signed compare
	44		- comp.f64 [param1] to [param2]
	45		- comp.f32 [param1] to [param2]
	46		- comp.s64 [param1] to [param2]
	47		- comp.s32 [param1] to [param2]
	48		- comp.s16 [param1] to [param2]
	49		- comp.s8 [param1] to [param2]
    
	; Copy data
	50		- copy.f64 [param1] to [param2]
	51		- copy.f32 [param1] to [param2]
	52		- copy.u64 [param1] to [param2]
	53		- copy.u32 [param1] to [param2]
	54		- copy.u16 [param1] to [param2]
	55		- copy.u8 [param1] to [param2]
	56		- copy.extended [param1] to [param2] for [imm32]	; copy [imm32] bytes of data from [param1] to [param2]
    
	; Move data (copy and zero out)
	57		- move.f64 [param1] to [param2]
	58		- move.f32 [param1] to [param2]
	59		- move.u64 [param1] to [param2]
	60		- move.u32 [param1] to [param2]
	61		- move.u16 [param1] to [param2]
	62		- move.u8 [param1] to [param2]
    
	; Exchange data
	63		- exchange.f64 [param1] with [param2]
	64		- exchange.f32 [param1] with [param2]
	65		- exchange.u64 [param1] with [param2]
	66		- exchange.u32 [param1] with [param2]
	67		- exchange.u16 [param1] with [param2]
	68		- exchange.u8 [param1] with [param2]
    
	69		- Nuserved
	70		- Nuserved
	71		- Nuserved
	72		- Nuserved
	73		- Nuserved
	74		- Nuserved
	75		- Nuserved
	76		- Nuserved
	77		- Nuserved
	78		- Nuserved
	79		- Nuserved
	80		- Nuserved
	81		- Nuserved
	82		- Nuserved
	83		- Nuserved
	84		- Nuserved
	85		- Nuserved
	86		- Nuserved
	87		- Nuserved
	88		- Nuserved
    
	; Logical AND
	89		- and.u64 [param1] against [param2]
	90		- and.u32 [param1] against [param2]
	91		- and.u16 [param1] against [param2]
	92		- and.u8 [param1] against [param2]
    
	; Logical OR
	93		- or.u64 [param1] against [param2]
	94		- or.u32 [param1] against [param2]
	95		- or.u16 [param1] against [param2]
	96		- or.u8 [param1] against [param2]
    
	; Logical NOT
	97		- not.u64 [param1] against [param2]
	98		- not.u32 [param1] against [param2]
	99		- not.u16 [param1] against [param2]
	100		- not.u8 [param1] against [param2]
    
	; Logical XOR
	101		- xor.u64 [param1] against [param2]
	102		- xor.u32 [param1] against [param2]
	103		- xor.u16 [param1] against [param2]
	104		- xor.u8 [param1] against [param2]
    
	; Negate
	105		- neg.f64 [param1]
	106		- neg.f32 [param1]
	107		- neg.u64 [param1]
	108		- neg.u32 [param1]
	109		- neg.u16 [param1]
	110		- neg.u8 [param1]
    
	; Increment
	111		- inc.f64 [param1]
	112		- inc.f32 [param1]
	113		- inc.u64 [param1]
	114		- inc.u32 [param1]
	115		- inc.u16 [param1]
	116		- inc.u8 [param1]
    
	; Decrement
	117		- dec.f64 [param1]
	118		- dec.f32 [param1]
	119		- dec.u64 [param1]
	120		- dec.u32 [param1]
	121		- dec.u16 [param1]
	122		- dec.u8 [param1]
	
	; Shift left
	123		- shl.u64 [param1] by [param2]
	124		- shl.u32 [param1] by [param2]
	125		- shl.u16 [param1] by [param2]
	126		- shl.u8 [param1] by [param2]
    
	; Shift right unsigned
	127		- shr.u64 [param1] by [param2]
	128		- shr.u32 [param1] by [param2]
	129		- shr.u16 [param1] by [param2]
	130		- shr.u8 [param1] by [param2]
    
	; Shift right signed
	131		- shr.s64 [param1] by [param2]
	132		- shr.s32 [param1] by [param2]
	133		- shr.s16 [param1] by [param2]
	134		- shr.s8 [param1] by [param2]
    
	; Rotate left
	135		- rol.u64 [param1] by [param2]
	136		- rol.u32 [param1] by [param2]
	137		- rol.u16 [param1] by [param2]
	138		- rol.u8 [param1] by [param2]
    
	; Rotate right
	139		- ror.u64 [param1] by [param2]
	140		- ror.u32 [param1] by [param2]
	141		- ror.u16 [param1] by [param2]
	142		- ror.u8 [param1] by [param2]

	; Compute an address
	143		- address [param1] + [param2]
    
	; Copy floating point to integer, or integer to floating point
	144		- copy.f32.s32 [freg32] to [reg32]
	145		- copy.s32.f32 [reg32] to [freg32]
	146		- copy.f64.s64 [freg64] to [reg64]
	147		- copy.s64.f64 [reg64] to [freg64]
    
	; Upsize or downsize floating point to integer, or integer to floating point
	148		- copy.f32.s64 [freg32] to [reg64]
	149		- copy.s32.f64 [reg32] to [freg64]
	150		- copy.f64.s32 [freg64] to [reg32]
	151		- copy.s64.f32 [reg64] to [freg32]
    
	; Save flags, restore flags
	152		- flags.out [param1]					; save flags to some location
	153		- flags.in [param1]					; set flags from some location
	
	; Common register operations
	154		- copy.result [param1]				; copies result to [param1]
	155		- bump								; copies result to +008
	156		- bump [imm8]						; copies result to +008, and each additional slot up for the [imm8] slot count
    
	; Operations
	157		- debug								; debugger breakpoint
	158		- sleep								; releases timeslice execution until next scheduling
	159		- nop								; no operation
	160		- error								; Signal an error number, used to allow source code in error to still compile
	161		- nuserved
	162		- nuserved
	163		- set.exsnip [param1]				; set the default exception snippet to [param1]
	164		- exception [param1]				; trigger an exception to snippet [param1]
    
	; Branching
	165		- jump.sno [param1]:[param2]		; jump to snippet [param1] with explicit offset [param2]
	166		- jump.dsno [param1]:[param2]		; jump to dynamic snippet [param1] with explicit offset [param2]
	167		- jump.hard [param1]				; move to explicit offset in current snippet or dynamic snippet
	168		- jump [param1]						; adjust ip forward backward by signed [param1]
	169		- jump [imm16]						; adjust ip forward backward by signed [imm16]
	170		- jump [imm8]						; adjust ip forward backward by signed [imm8]
	171		- Nuserved
    
	; Calling
	172		- call.sn [param1]					; call snippet [param1]
	173		- call.dsn [param1]					; call dynamic snippet [param1]
	174		- call.sno [param1]:[param2]		; call snippet [param1] with offset of explicit [param2]
	175		- call.dsno [param1]:[param2]		; call dynamic snippet [param1] with offset of explicit [param2]
	176		- host [imm16]						; execute host function [imm16]
	177		- call.back							; explicit return from a call
	178		- Nuserved
    
	; Stack
	179		- push.u64 [param1]					; pushes 64-bit quantity onto stack from source
	180		- pop.u64 [param1]					; pops 64-bit quantity back off stack into source
	181		- push.u32 [param1]					; pushes 32-bit quantity onto stack from source
	182		- pop.u32 [param1]					; pops 32-bit quantity back off stack into source
	183		- Nuserved
    
	; Registers
	184		- regs.out [param1],[imm16],[imm16]	; save register block beginning at [param1] + [imm16] for [imm16] bytes
	185		- regs.in [imm16],[param1],[imm16]	; load data into register block to [imm16] from [param1] for [imm16] bytes
	186		- Nuserved
    
	; Flags
	187		- flag.set [imm8]					; set flag bit [imm8]
	188		- flag.clear [imm8]					; clear flag bit [imm8]
	189		- flag.toggle [imm8]				; toggle flag bit [imm8]
	190		- flag.in [source]					; copy [source] to flags
	191		- flag.out [source]					; copy flags to [source]
	192		- set.c								; set carry? flag
	193		- set.o								; set overflow? flag
	194		- set.u								; set underflow? flag
	195		- set.e								; set equal? flag
	196		- set.z								; set zero? flag
	197		- set.n								; set negative? flag
	198		- set.p								; set positive? flag
	199		- set.a								; set app? flag
	
	200		- Nuserved
	201		- Nuserved
	202		- Nuserved
	203		- Nuserved
	204		- Nuserved
	205		- Nuserved
	206		- Nuserved
	207		- Nuserved
	208		- Nuserved
	209		- Nuserved
	210		- Nuserved
	211		- Nuserved
	212		- Nuserved
	213		- Nuserved

	; For preparing and calling snippets and parameter blocks
	214		- ready [param1]					; prepare a ready block pointing to snippet or dynamic snippet [param1]
	215		- ready.in [param1]					; load the ready pointer
	216		- ready.out [param1]				; save the ready pointer
	217		- ready.offset [param1] [imm16]		; prepare a ready block pointing to [param1] and set the ready offset to [imm16]
	218		- set.ready.offset [imm16]			; set the ready offset to this location
	219		- set.add.ready.offset [imm16]		; signed add n to ready.offset
	220		- set.skip.8						; skip 8-bits
	221		- set.skip.16						; skip 16-bits
	222		- set.skip.32						; skip 32-bits
	223		- set.skip.64						; skip 64-bits
	224		- set.8 [param1] [imm16]			; set 8-bits by [param1] at the explicit [imm16] offset
	225		- set.16 [param1] [imm16]			; set 16-bits by [param1] at the explicit [imm16] offset
	226		- set.32 [param1] [imm16]			; set 32-bits by [param1] at the explicit [imm16] offset
	227		- set.64 [param1] [imm16]			; set 64-bits by [param1] at the explicit [imm16] offset
	228		- set.imm64 [imm64] [imm16]			; set the 64-bit immediate value at the explicit [imm16] offset
	229		- set.imm32 [imm32] [imm16]			; set the 32-bit immediate value at the explicit [imm16] offset
	230		- set.8 [param1]					; set the next 8-bits in the ready block
	231		- set.16 [param1]					; set the next 16-bits in the ready block
	232		- set.32 [param1]					; set the next 32-bits in the ready block
	233		- set.64 [param1]					; set the next 64-bits in the ready block
	234		- set.imm64 [imm64]					; set the 64-bit immediate value
	235		- set.imm32 [imm32]					; set the 32-bit immediate value
	236		- go.sn [param1]					; call snippet [param1] with an implicit offset of 0
	237		- go.dsn [param1]					; call dynamic snippet [param1] with an implicit offset of 0
	238		- go.sno [param1]:[param2]			; call snippet [param1] with an explicit offset [param2]
	239		- go.dsno [param1]:[param2]			; call dynamic snippet [param1] with an explicit offset [param2]
	240		- go.back							; explicit return from a go

	; Semaphore processing
	241		- semaphore.create					; semaphore create
	242		- semaphore.trylock [param1]		; semaphore try lock, and set carry? flag if failure
	243		- semaphore.lock	[param1]		; semaphore lock
	244		- semaphore.unlock [param1]			; semaphore unlock
	245		- semaphore.delete [param1]			; semaphore delete

	; Predicate population
	246		- pred.load.4 [imm16][4:repeat]		; uses an extended predicate for a high combination of explicit conditions
	247		- pred.load.8 [param1][8:repeat]	; copies 64-bit quantity into pred register, and indicates an 8-bit repeat count
	248		- pred.fill							; fills lower 16 bits of flags register into pred
	
	; Preparing data for calling snippets
	249		- Nuserved
	250		- Nuserved
	251		- Nuserved
	252		- Nuserved

	; Other ISA emulation
	253		- x86 [param1]						; Execute an x86 32-bit assembly instruction block snippet on the native cpu
	254		- arm [param1]						; Execute an arm 32-bit assembly instruction block snippet on the native cpu
    
	; Extended instructions
	255		- Extended instruction byte follows (to be defined and implemented later)
