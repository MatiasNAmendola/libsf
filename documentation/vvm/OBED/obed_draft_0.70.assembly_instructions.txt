[12:PREDICATE + INSTRUCTION] - INSTRUCTION SET (OPCODE BYTE VALUES TO BE DEFINED LATER)
	; Unsigned add
	0		- UADD64 [PARAM1] TO [PARAM2]
	1		- UADD32 [PARAM1] TO [PARAM2]
	2		- UADD16 [PARAM1] TO [PARAM2]
	3		- UADD8 [PARAM1] TO [PARAM2]
	
	; Unsigned subtract
	4		- USUB64 [PARAM1] FROM [PARAM2]
	5		- USUB32 [PARAM1] FROM [PARAM2]
	6		- USUB16 [PARAM1] FROM [PARAM2]
	7		- USUB8 [PARAM1] FROM [PARAM2]
    
	; Unsigned multiply
	8		- UMUL64 [PARAM1] BY [PARAM2]
	9		- UMUL32 [PARAM1] BY [PARAM2]
	10		- UMUL16 [PARAM1] BY [PARAM2]
	11		- UMUL8 [PARAM1] BY [PARAM2]
    
	; Unsigned divide
	12		- UDIV64 [PARAM1] BY [PARAM2]
	13		- UDIV32 [PARAM1] BY [PARAM2]
	14		- UDIV16 [PARAM1] BY [PARAM2]
	15		- UDIV8 [PARAM1] BY [PARAM2]
    
	; Unsigned compare
	16		- UCOMP64 [PARAM1] TO [PARAM2]
	17		- UCOMP32 [PARAM1] TO [PARAM2]
	18		- UCOMP16 [PARAM1] TO [PARAM2]
	19		- UCOMP8 [PARAM1] TO [PARAM2]
    
	; Signed add
	20		- SADDF64 [PARAM1] TO [PARAM2]
	21		- SADDF32 [PARAM1] TO [PARAM2]
	22		- SADD64 [PARAM1] TO [PARAM2]
	23		- SADD32 [PARAM1] TO [PARAM2]
	24		- SADD16 [PARAM1] TO [PARAM2]
	25		- SADD8 [PARAM1] TO [PARAM2]
    
	; Signed subtract
	26		- SSUBF64 [PARAM1] FROM [PARAM2]
	27		- SSUBF32 [PARAM1] FROM [PARAM2]
	28		- SSUB64 [PARAM1] FROM [PARAM2]
	29		- SSUB32 [PARAM1] FROM [PARAM2]
	30		- SSUB16 [PARAM1] FROM [PARAM2]
	31		- SSUB8 [PARAM1] FROM [PARAM2]
    
	; Signed multiply
	32		- SMULF64 [PARAM1] BY [PARAM2]
	33		- SMULF32 [PARAM1] BY [PARAM2]
	34		- SMUL64 [PARAM1] BY [PARAM2]
	35		- SMUL32 [PARAM1] BY [PARAM2]
	36		- SMUL16 [PARAM1] BY [PARAM2]
	37		- SMUL8 [PARAM1] BY [PARAM2]
    
	; Signed divide
	38		- SDIVF64 [PARAM1] BY [PARAM2]
	39		- SDIVF32 [PARAM1] BY [PARAM2]
	40		- SDIV64 [PARAM1] BY [PARAM2]
	41		- SDIV32 [PARAM1] BY [PARAM2]
	42		- SDIV16 [PARAM1] BY [PARAM2]
	43		- SDIV8 [PARAM1] BY [PARAM2]
    
	; Signed compare
	44		- SCOMPF64 [PARAM1] TO [PARAM2]
	45		- SCOMPF32 [PARAM1] TO [PARAM2]
	46		- SCOMP64 [PARAM1] TO [PARAM2]
	47		- SCOMP32 [PARAM1] TO [PARAM2]
	48		- SCOMP16 [PARAM1] TO [PARAM2]
	49		- SCOMP8 [PARAM1] TO [PARAM2]
    
	; Copy data
	50		- COPYF64 [PARAM1] TO [PARAM2]
	51		- COPYF32 [PARAM1] TO [PARAM2]
	52		- COPY64 [PARAM1] TO [PARAM2]
	53		- COPY32 [PARAM1] TO [PARAM2]
	54		- COPY16 [PARAM1] TO [PARAM2]
	55		- COPY8 [PARAM1] TO [PARAM2]
	56		- COPY8X [PARAM1] TO [PARAM2] FOR [IMM32]	; EXTENDED COPY [IMM32] BYTES OF DATA FROM [PARAM1] TO [PARAM2]
    
	; Move data (copy and zero out)
	57		- MOVEF64 [PARAM1] TO [PARAM2]
	58		- MOVEF32 [PARAM1] TO [PARAM2]
	59		- MOVE64 [PARAM1] TO [PARAM2]
	60		- MOVE32 [PARAM1] TO [PARAM2]
	61		- MOVE16 [PARAM1] TO [PARAM2]
	62		- MOVE8 [PARAM1] TO [PARAM2]
    
	; Exchange data
	63		- XCHF64 [PARAM1] WITH [PARAM2]
	64		- XCHF32 [PARAM1] WITH [PARAM2]
	65		- XCH64 [PARAM1] WITH [PARAM2]
	66		- XCH32 [PARAM1] WITH [PARAM2]
	67		- XCH16 [PARAM1] WITH [PARAM2]
	68		- XCH8 [PARAM1] WITH [PARAM2]
    
	; Exchange and add unsigned
	69		- XCHUADD64 [PARAM1] WITH [PARAM2]
	70		- XCHUADD32 [PARAM1] WITH [PARAM2]
	71		- XCHUADD16 [PARAM1] WITH [PARAM2]
	72		- XCHUADD8 [PARAM1] WITH [PARAM2]
    
	; Exchange and multiply unsigned
	73		- XCHUMUL64 [PARAM1] WITH [PARAM2]
	74		- XCHUMUL32 [PARAM1] WITH [PARAM2]
	75		- XCHUMUL16 [PARAM1] WITH [PARAM2]
	76		- XCHUMUL8 [PARAM1] WITH [PARAM2]
    
	; Exchange and add signed
	77		- XCHSADDF64 [PARAM1] WITH [PARAM2]
	78		- XCHSADDF32 [PARAM1] WITH [PARAM2]
	79		- XCHSADD64 [PARAM1] WITH [PARAM2]
	80		- XCHSADD32 [PARAM1] WITH [PARAM2]
	81		- XCHSADD16 [PARAM1] WITH [PARAM2]
	82		- XCHSADD8 [PARAM1] WITH [PARAM2]
    
	; Exchange and multiply unsigned
	83		- XCHSMULF64 [PARAM1] WITH [PARAM2]
	84		- XCHSMULF32 [PARAM1] WITH [PARAM2]
	85		- XCHSMUL64 [PARAM1] WITH [PARAM2]
	86		- XCHSMUL32 [PARAM1] WITH [PARAM2]
	87		- XCHSMUL16 [PARAM1] WITH [PARAM2]
	88		- XCHSMUL8 [PARAM1] WITH [PARAM2]
    
	; Logical AND
	89		- AND64 [PARAM1] AGAINST [PARAM2]
	90		- AND32 [PARAM1] AGAINST [PARAM2]
	91		- AND16 [PARAM1] AGAINST [PARAM2]
	92		- AND8 [PARAM1] AGAINST [PARAM2]
    
	; Logical OR
	93		- OR64 [PARAM1] AGAINST [PARAM2]
	94		- OR32 [PARAM1] AGAINST [PARAM2]
	95		- OR16 [PARAM1] AGAINST [PARAM2]
	96		- OR8 [PARAM1] AGAINST [PARAM2]
    
	; Logical NOT
	97		- NOT64 [PARAM1] AGAINST [PARAM2]
	98		- NOT32 [PARAM1] AGAINST [PARAM2]
	99		- NOT16 [PARAM1] AGAINST [PARAM2]
	100		- NOT8 [PARAM1] AGAINST [PARAM2]
    
	; Logical XOR
	101		- XOR64 [PARAM1] AGAINST [PARAM2]
	102		- XOR32 [PARAM1] AGAINST [PARAM2]
	103		- XOR16 [PARAM1] AGAINST [PARAM2]
	104		- XOR8 [PARAM1] AGAINST [PARAM2]
    
	; Change sign
	105		- CHGSF64 [PARAM1]
	106		- CHGSF32 [PARAM1]
    
	; Negate
	107		- NEG64 [PARAM1]
	108		- NEG32 [PARAM1]
	109		- NEG16 [PARAM1]
	110		- NEG8 [PARAM1]
    
	; Increment
	111		- INCF64 [PARAM1]
	112		- INCF32 [PARAM1]
	113		- INC64 [PARAM1]
	114		- INC32 [PARAM1]
	115		- INC16 [PARAM1]
	116		- INC8 [PARAM1]
    
	; Decrement
	117		- DECF64 [PARAM1]
	118		- DECF32 [PARAM1]
	119		- DEC64 [PARAM1]
	120		- DEC32 [PARAM1]
	121		- DEC16 [PARAM1]
	122		- DEC8 [PARAM1]
	
	; Shift left
	123		- SHL64 [PARAM1] BY [PARAM2]
	124		- SHL32 [PARAM1] BY [PARAM2]
	125		- SHL16 [PARAM1] BY [PARAM2]
	126		- SHL8 [PARAM1] BY [PARAM2]
    
	; Shift right unsigned
	127		- SHRU64 [PARAM1] BY [PARAM2]
	128		- SHRU32 [PARAM1] BY [PARAM2]
	129		- SHRU16 [PARAM1] BY [PARAM2]
	130		- SHRU8 [PARAM1] BY [PARAM2]
    
	; Shift right signed
	131		- SHRS64 [PARAM1] BY [PARAM2]
	132		- SHRS32 [PARAM1] BY [PARAM2]
	133		- SHRS16 [PARAM1] BY [PARAM2]
	134		- SHRS8 [PARAM1] BY [PARAM2]
    
	; Rotate left
	135		- ROL64 [PARAM1] BY [PARAM2]
	136		- ROL32 [PARAM1] BY [PARAM2]
	137		- ROL16 [PARAM1] BY [PARAM2]
	138		- ROL8 [PARAM1] BY [PARAM2]
    
	; Rotate right
	139		- ROR64 [PARAM1] BY [PARAM2]
	140		- ROR32 [PARAM1] BY [PARAM2]
	141		- ROR16 [PARAM1] BY [PARAM2]
	142		- ROR8 [PARAM1] BY [PARAM2]
    
	143		- NUSERVED
    
	; Copy floating point to integer, or integer to floating point
	144		- COPYF32I32 [FREG32] TO [REG32]
	145		- COPYI32F32 [REG32] TO [FREG32]
	146		- COPYF64I64 [FREG64] TO [REG64]
	147		- COPYI64F64 [REG64] TO [FREG64]
    
	; Upsize or downsize floating point to integer, or integer to floating point
	148		- COPYF32I64 [FREG32] TO [REG64]
	149		- COPYI32F64 [REG32] TO [FREG64]
	150		- COPYF64I32 [FREG64] TO [REG32]
	151		- COPYI64F32 [REG64] TO [FREG32]
    
	; Save flags, restore flags
	152		- FLAGSOUT FLAGS TO [PARAM1]
	153		- FLAGSIN [PARAM1] TO FLAGS
	
	; Common register operations
	154		- COPYRESULT [PARAM1]				; COPIES RESULT TO [PARAM1]
	155		- BUMP [IMM8]						; COPIES RESULT TO +008, and each additional slot up for the [IMM8] slot count
	156		- NUSERVED
    
	; Operations
	157		- DEBUG								; DEBUGGER BREAKPOINT
	158		- HALT								; HALTS TIMESLICE EXECUTION UNTIL NEXT SCHEDULING
	159		- NOP								; USED FOR PADDING
	160		- PRIORITY [IMM8]					; SIGNED VALUE INDICATING PRIORTY (LOWEST TO HIGHTEST, NEGATIVE TO 0 TO POSITIVE, 0=NORMAL)
	161		- NUSERVED
	162		- NUSERVED
	163		- NUSERVED
	164		- UNIQUE							; GET THE NEXT SYSTEM-WIDE 64-BIT UNIQUE NUMBER
    
	; Branching
	165		- SETIP [PARAM1]:[PARAM2]			; EXPLICIT OFFSET [PARAM2] IN EXPLICIT SNIPPET [PARAM1] 
	166		- SETIP [PARAM1]:[PARAM2]			; EXPLICIT OFFSET [PARAM2] IN EXPLICIT DYNAMIC SNIPPET [PARAM1] 
	167		- SETIP [PARAM1]					; EXPLICIT OFFSET IN CURRENT SNIPPET
	168		- ADJIP64 [PARAM1]					; ADJUST IP FORWARD BACKWARD BY SIGNED [SOURCE]
	169		- ADJIP32 [PARAM2]					; ADJUST IP FORWARD BACKWARD BY SIGNED [SOURCE]
	170		- ADJIP16 [IMM16]					; ADJUST IP FORWARD BACKWARD BY SIGNED [IMM16]
	171		- ADJIP8 [IMM8]						; ADJUST IP FORWARD BACKWARD BY SIGNED [IMM8]
    
	; Calling
	172		- CALLSN [PARAM1]					; CALL SNIPPET [PARAM1]
	173		- CALLDSN [PARAM1]					; CALL DYNAMIC SNIPPET [PARAM1]
	174		- HOST [IMM16]						; EXECUTE HOST FUNCTION [IMM16]
	175		- NUSERVED
	176		- NUSERVED
	177		- NUSERVED
	178		- RETURN							; EXPLICIT RETURN, IF EXECUTED WITH NO RETURN SNIPPET, TERMINATES PROGRAM
    
	; Stack
	179		- PUSH64 [PARAM1]					; PUSHES 64-BIT QUANTITY ONTO STACK FROM SOURCE
	180		- POP64 [PARAM1]					; POPS 64-BIT QUANTITY BACK OFF STACK INTO SOURCE
	181		- PUSH32 [PARAM1]					; PUSHES 32-BIT QUANTITY ONTO STACK FROM SOURCE
	182		- POP32 [PARAM1]					; POPS 32-BIT QUANTITY BACK OFF STACK INTO SOURCE
	183		- STACKCOPY SP[PARAM1],[PARAM2],[IMM32]	; COPY [IMM32] BYTES FROM STACK+[PARAM1] TO [PARAM2]
    
	184		- NUSERVED
	185		- NUSERVED
	186		- NUSERVED
    
	; Flags
	187		- FLAGSET [IMM8]					; SET FLAG BIT [IMM8]
	188		- FLAGCLEAR [IMM8]					; CLEAR FLAG BIT [IMM8]
	189		- FLAGTOGGLE [IMM8]					; TOGGLE FLAG BIT [IMM8]
	190		- FLAGIN [SOURCE]					; COPY [SOURCE] TO FLAGS
	191		- FLAGOUT [SOURCE]					; COPY FLAGS TO [SOURCE]
	192		- SETC								; SET CARRY? FLAG
	193		- SETO								; SET OVERFLOW? FLAG
	194		- SETU								; SET UNDERFLOW? FLAG
	195		- SETE								; SET EQUAL? FLAG
	196		- SETZ								; SET ZERO? FLAG
	197		- SETN								; SET NEGATIVE? FLAG
	198		- SETP								; SET POSITIVE? FLAG
	199		- SETA								; SET APP? FLAG
	
	200		- NUSERVED
	201		- NUSERVED
	202		- NUSERVED
	203		- NUSERVED
	204		- NUSERVED
	205		- NUSERVED
	206		- NUSERVED
	207		- NUSERVED
	208		- NUSERVED
	209		- NUSERVED
	210		- NUSERVED
	211		- NUSERVED
	212		- NUSERVED
	213		- NUSERVED
	214		- NUSERVED
	
	; Register spilling / filling
	215		- SCATTER [PARAM1][PARAM2][IMM16]	; SCATTER REGISTER BLOCK BEGINNING AT [PARAM1] TO [PARAM2] FOR [IMM16] BYTES
	216		- GATHER [PARAM1][PARAM2][IMM16]	; GATHER REGISTER BLOCK FROM [PARAM2] TO [PARAM1] FOR [IMM16] BYTES
	
	217		- NUSERVED
	218		- NUSERVED
	219		- NUSERVED
	220		- NUSERVED
	221		- NUSERVED
	222		- NUSERVED
	223		- NUSERVED
	224		- NUSERVED
	225		- NUSERVED
	
	; VVM operations
	226		- DOWN								; SUSPEND THE VIRTUAL MACHINE
	
	227		- NUSERVED
	228		- NUSERVED
	
	; Exception handling
	229		- EXSNIP [PARAM1]					; SET THE DEFAULT EXCEPTION SNIPPET TO [PARAM1]
	230		- EXCEPTION [PARAM1]				; TRIGGER AN EXCEPTION TO SNIPPET [PARAM1]
			
	231		- NUSERVED
	232		- NUSERVED
	233		- NUSERVED
	234		- NUSERVED
	235		- NUSERVED
	236		- NUSERVED
	237		- NUSERVED
	238		- NUSERVED
	239		- NUSERVED
	240		- NUSERVED
	
	; Semaphore processing
	241		- SEMAPHORECREATE					; SEMAPHORE CREATE
	242		- SEMAPHORETRYLOCK [PARAM1]			; SEMAPHORE TRY LOCK, AND SET CARRY? FLAG IF FAILURE
	243		- SEMAPHORELOCK	[PARAM1]			; SEMAPHORE LOCK
	244		- SEMAPHOREUNLOCK [PARAM1]			; SEMAPHORE UNLOCK
	245		- SEMAPHOREDELETE [PARAM1]			; SEMAPHORE DELETE
	
	; Predicate population
	246		- PREDICATE [IMM16][4:REPEAT]		; USES AN EXTENDED PREDICATE FOR A HIGH COMBINATION OF EXPLICIT CONDITIONS
	247		- PREDICATE [PARAM1][8:REPEAT]		; COPIES 64-BIT QUANTITY INTO PRED REGISTER, AND INDICATES AN 8-BIT REPEAT COUNT
	248		- PREDIMPORT						; IMPORTS LOWER 16 BITS OF FLAGS REGISTER INTO PRED
			
	248		- NUSERVED
	249		- NUSERVED
	250		- NUSERVED
	251		- NUSERVED
	252		- NUSERVED
	253		- NUSERVED
	254		- NUSERVED
    
	; Extended instructions
	255		- EXTENDED INSTRUCTION BYTE FOLLOWS (TO BE DEFINED / ADDED LATER)
				EXAMPLES:
					SIN, COS, TAN
					ASIN, ACOS, ATAN
					SQUARE, SQRT, ROUND
