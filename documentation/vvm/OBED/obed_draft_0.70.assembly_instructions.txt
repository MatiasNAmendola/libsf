+---------------------------------------+
|               OBED VM                 |
|                                       |
|  OBject/Event Driven Virtual Machine  |
|  Assembly Language Opcode Definition  |
|                                       |
|             Feb.22.2014               |
|             Draft 0.70                |
|          by Rick C. Hodgin            |
|                                       |
|  Released as the Go-Forward prototype |
|  for the mechanics of the VVM engine. |
|  In prayer (much prayer)... -RCH      |
+----------------------------------------

+---------------------------------------+
|  A request in prayer, through faith   |
|---------------------------------------|
| May the Lord, Jesus Christ, bless the |
| work of my hands on this project, as  |
| I give all credit, honor, and glory   |
| to Him.  Amen.                        |
|---------------------------------------|
| May the Lord, Jesus Christ, bless the |
| work of all hands on this project, as |
| we give all credit, honor, and glory  |
| to Him.  Amen.                        |
+---------------------------------------+




[8:INSTRUCTION] - INSTRUCTION SET (OPCODE BYTE VALUES TO BE DEFINED LATER)

	; Unsigned add
	0		- UADD.64 [PARAM1] TO [PARAM2]
	1		- UADD.32 [PARAM1] TO [PARAM2]
	2		- UADD.16 [PARAM1] TO [PARAM2]
	3		- UADD.8 [PARAM1] TO [PARAM2]
	
	; Unsigned subtract
	4		- USUB.64 [PARAM1] FROM [PARAM2]
	5		- USUB.32 [PARAM1] FROM [PARAM2]
	6		- USUB.16 [PARAM1] FROM [PARAM2]
	7		- USUB.8 [PARAM1] FROM [PARAM2]
    
	; Unsigned multiply
	8		- UMUL.64 [PARAM1] BY [PARAM2]
	9		- UMUL.32 [PARAM1] BY [PARAM2]
	10		- UMUL.16 [PARAM1] BY [PARAM2]
	11		- UMUL.8 [PARAM1] BY [PARAM2]
    
	; Unsigned divide
	12		- UDIV.64 [PARAM1] BY [PARAM2]
	13		- UDIV.32 [PARAM1] BY [PARAM2]
	14		- UDIV.16 [PARAM1] BY [PARAM2]
	15		- UDIV.8 [PARAM1] BY [PARAM2]
    
	; Unsigned compare
	16		- UCOMP.64 [PARAM1] TO [PARAM2]
	17		- UCOMP.32 [PARAM1] TO [PARAM2]
	18		- UCOMP.16 [PARAM1] TO [PARAM2]
	19		- UCOMP.8 [PARAM1] TO [PARAM2]
    
	; Signed add
	20		- SADD.F64 [PARAM1] TO [PARAM2]
	21		- SADD.F32 [PARAM1] TO [PARAM2]
	22		- SADD.64 [PARAM1] TO [PARAM2]
	23		- SADD.32 [PARAM1] TO [PARAM2]
	24		- SADD.16 [PARAM1] TO [PARAM2]
	25		- SADD.8 [PARAM1] TO [PARAM2]
    
	; Signed subtract
	26		- SSUB.F64 [PARAM1] FROM [PARAM2]
	27		- SSUB.F32 [PARAM1] FROM [PARAM2]
	28		- SSUB.64 [PARAM1] FROM [PARAM2]
	29		- SSUB.32 [PARAM1] FROM [PARAM2]
	30		- SSUB.16 [PARAM1] FROM [PARAM2]
	31		- SSUB.8 [PARAM1] FROM [PARAM2]
    
	; Signed multiply
	32		- SMUL.F64 [PARAM1] BY [PARAM2]
	33		- SMUL.F32 [PARAM1] BY [PARAM2]
	34		- SMUL.64 [PARAM1] BY [PARAM2]
	35		- SMUL.32 [PARAM1] BY [PARAM2]
	36		- SMUL.16 [PARAM1] BY [PARAM2]
	37		- SMUL.8 [PARAM1] BY [PARAM2]
    
	; Signed divide
	38		- SDIV.F64 [PARAM1] BY [PARAM2]
	39		- SDIV.F32 [PARAM1] BY [PARAM2]
	40		- SDIV.64 [PARAM1] BY [PARAM2]
	41		- SDIV.32 [PARAM1] BY [PARAM2]
	42		- SDIV.16 [PARAM1] BY [PARAM2]
	43		- SDIV.8 [PARAM1] BY [PARAM2]
    
	; Signed compare
	44		- SCOMP.F64 [PARAM1] TO [PARAM2]
	45		- SCOMP.F32 [PARAM1] TO [PARAM2]
	46		- SCOMP.64 [PARAM1] TO [PARAM2]
	47		- SCOMP.32 [PARAM1] TO [PARAM2]
	48		- SCOMP.16 [PARAM1] TO [PARAM2]
	49		- SCOMP.8 [PARAM1] TO [PARAM2]
    
	; Copy data
	50		- COPY.F64 [PARAM1] TO [PARAM2]
	51		- COPY.F32 [PARAM1] TO [PARAM2]
	52		- COPY.64 [PARAM1] TO [PARAM2]
	53		- COPY.32 [PARAM1] TO [PARAM2]
	54		- COPY.16 [PARAM1] TO [PARAM2]
	55		- COPY.8 [PARAM1] TO [PARAM2]
	56		- COPY.EXTENDED [PARAM1] TO [PARAM2] FOR [IMM32]	; COPY [IMM32] BYTES OF DATA FROM [PARAM1] TO [PARAM2]
    
	; Move data (copy and zero out)
	57		- MOVE.F64 [PARAM1] TO [PARAM2]
	58		- MOVE.F32 [PARAM1] TO [PARAM2]
	59		- MOVE.64 [PARAM1] TO [PARAM2]
	60		- MOVE.32 [PARAM1] TO [PARAM2]
	61		- MOVE.16 [PARAM1] TO [PARAM2]
	62		- MOVE.8 [PARAM1] TO [PARAM2]
    
	; Exchange data
	63		- EXCHANGE.F64 [PARAM1] WITH [PARAM2]
	64		- EXCHANGE.F32 [PARAM1] WITH [PARAM2]
	65		- EXCHANGE.64 [PARAM1] WITH [PARAM2]
	66		- EXCHANGE.32 [PARAM1] WITH [PARAM2]
	67		- EXCHANGE.16 [PARAM1] WITH [PARAM2]
	68		- EXCHANGE.8 [PARAM1] WITH [PARAM2]
    
	69		- Nuserved
	70		- Nuserved
	71		- Nuserved
	72		- Nuserved
	73		- Nuserved
	74		- Nuserved
	75		- Nuserved
	76		- Nuserved
	77		- Nuserved
	78		- Nuserved
	79		- Nuserved
	80		- Nuserved
	81		- Nuserved
	82		- Nuserved
	83		- Nuserved
	84		- Nuserved
	85		- Nuserved
	86		- Nuserved
	87		- Nuserved
	88		- Nuserved
    
	; Logical AND
	89		- AND.64 [PARAM1] AGAINST [PARAM2]
	90		- AND.32 [PARAM1] AGAINST [PARAM2]
	91		- AND.16 [PARAM1] AGAINST [PARAM2]
	92		- AND.8 [PARAM1] AGAINST [PARAM2]
    
	; Logical OR
	93		- OR.64 [PARAM1] AGAINST [PARAM2]
	94		- OR.32 [PARAM1] AGAINST [PARAM2]
	95		- OR.16 [PARAM1] AGAINST [PARAM2]
	96		- OR.8 [PARAM1] AGAINST [PARAM2]
    
	; Logical NOT
	97		- NOT.64 [PARAM1] AGAINST [PARAM2]
	98		- NOT.32 [PARAM1] AGAINST [PARAM2]
	99		- NOT.16 [PARAM1] AGAINST [PARAM2]
	100		- NOT.8 [PARAM1] AGAINST [PARAM2]
    
	; Logical XOR
	101		- XOR.64 [PARAM1] AGAINST [PARAM2]
	102		- XOR.32 [PARAM1] AGAINST [PARAM2]
	103		- XOR.16 [PARAM1] AGAINST [PARAM2]
	104		- XOR.8 [PARAM1] AGAINST [PARAM2]
    
	; Negate
	105		- NEG.F64 [PARAM1]
	106		- NEG.F32 [PARAM1]
	107		- NEG.64 [PARAM1]
	108		- NEG.32 [PARAM1]
	109		- NEG.16 [PARAM1]
	110		- NEG.8 [PARAM1]
    
	; Increment
	111		- INC.F64 [PARAM1]
	112		- INC.F32 [PARAM1]
	113		- INC.64 [PARAM1]
	114		- INC.32 [PARAM1]
	115		- INC.16 [PARAM1]
	116		- INC.8 [PARAM1]
    
	; Decrement
	117		- DEC.F64 [PARAM1]
	118		- DEC.F32 [PARAM1]
	119		- DEC.64 [PARAM1]
	120		- DEC.32 [PARAM1]
	121		- DEC.16 [PARAM1]
	122		- DEC.8 [PARAM1]
	
	; Shift left
	123		- SHL.64 [PARAM1] BY [PARAM2]
	124		- SHL.32 [PARAM1] BY [PARAM2]
	125		- SHL.16 [PARAM1] BY [PARAM2]
	126		- SHL.8 [PARAM1] BY [PARAM2]
    
	; Shift right unsigned
	127		- SHRU.64 [PARAM1] BY [PARAM2]
	128		- SHRU.32 [PARAM1] BY [PARAM2]
	129		- SHRU.16 [PARAM1] BY [PARAM2]
	130		- SHRU.8 [PARAM1] BY [PARAM2]
    
	; Shift right signed
	131		- SHRS.64 [PARAM1] BY [PARAM2]
	132		- SHRS.32 [PARAM1] BY [PARAM2]
	133		- SHRS.16 [PARAM1] BY [PARAM2]
	134		- SHRS.8 [PARAM1] BY [PARAM2]
    
	; Rotate left
	135		- ROL.64 [PARAM1] BY [PARAM2]
	136		- ROL.32 [PARAM1] BY [PARAM2]
	137		- ROL.16 [PARAM1] BY [PARAM2]
	138		- ROL.8 [PARAM1] BY [PARAM2]
    
	; Rotate right
	139		- ROR.64 [PARAM1] BY [PARAM2]
	140		- ROR.32 [PARAM1] BY [PARAM2]
	141		- ROR.16 [PARAM1] BY [PARAM2]
	142		- ROR.8 [PARAM1] BY [PARAM2]

    ; Change the stack
	143		- ADD.SP [PARAM1]					; Add a signed value to the stack
    
	; Copy floating point to integer, or integer to floating point
	144		- COPY.F32.I32 [FREG32] TO [REG32]
	145		- COPY.I32.F32 [REG32] TO [FREG32]
	146		- COPY.F64.I64 [FREG64] TO [REG64]
	147		- COPY.I64.F64 [REG64] TO [FREG64]
    
	; Upsize or downsize floating point to integer, or integer to floating point
	148		- COPY.F32.I64 [FREG32] TO [REG64]
	149		- COPY.I32.F64 [REG32] TO [FREG64]
	150		- COPY.F64.I32 [FREG64] TO [REG32]
	151		- COPY.I64.F32 [REG64] TO [FREG32]
    
	; Save flags, restore flags
	152		- FLAGS.OUT [PARAM1]					; Save flags to some location
	153		- FLAGS.IN [PARAM1]					; Set flags from some location
	
	; Common register operations
	154		- COPY.RESULT [PARAM1]				; Copies result to [PARAM1]
	155		- BUMP								; Copies result to +008
	156		- BUMP [IMM8]						; Copies result to +008, and each additional slot up for the [IMM8] slot count
    
	; Operations
	157		- DEBUG								; Debugger breakpoint
	158		- SLEEP								; Releases timeslice execution until next scheduling
	159		- NOP								; No operation
	160		- Nuserved
	161		- Nuserved
	162		- Nuserved
	163		- SET.EXSNIP [PARAM1]				; Set the default exception snippet to [PARAM1]
	164		- EXCEPTION [PARAM1]				; Trigger an exception to snippet [PARAM1]
    
	; Branching
	165		- JUMP.SNO [PARAM1]:[PARAM2]		; Jump to snippet [PARAM1] with explicit offset [PARAM2]
	166		- JUMP.DSNO [PARAM1]:[PARAM2]		; Jump to dynamic snippet [PARAM1] with explicit offset [PARAM2]
	167		- JUMP [PARAM1]						; Move to explicit offset in current snippet or dynamic snippet
	168		- JUMP.REL [PARAM1]					; ADJUST IP FORWARD BACKWARD BY SIGNED [PARAM1]
	169		- JUMP.REL [IMM16]					; ADJUST IP FORWARD BACKWARD BY SIGNED [IMM16]
	170		- JUMP.REL [IMM8]					; ADJUST IP FORWARD BACKWARD BY SIGNED [IMM8]
	171		- Nuserved
    
	; Calling
	172		- CALL.SN [PARAM1]					; CALL SNIPPET [PARAM1]
	173		- CALL.DSN [PARAM1]					; CALL DYNAMIC SNIPPET [PARAM1]
	174		- CALL.SNO [PARAM1]:[PARAM2]		; Call snippet [PARAM1] with offset of explicit [PARAM2]
	175		- CALL.DSNO [PARAM1]:[PARAM2]		; Call dynamic snippet [PARAM1] with offset of explicit [PARAM2]
	176		- HOST [IMM16]						; EXECUTE HOST FUNCTION [IMM16]
	177		- CALL.BACK							; Explicit return from a CALL
	178		- Nuserved
    
	; Stack
	179		- PUSH64 [PARAM1]					; PUSHES 64-BIT QUANTITY ONTO STACK FROM SOURCE
	180		- POP64 [PARAM1]					; POPS 64-BIT QUANTITY BACK OFF STACK INTO SOURCE
	181		- PUSH32 [PARAM1]					; PUSHES 32-BIT QUANTITY ONTO STACK FROM SOURCE
	182		- POP32 [PARAM1]					; POPS 32-BIT QUANTITY BACK OFF STACK INTO SOURCE
	183		- STACKCOPY SP-[PARAM1],[PARAM2],[IMM32]	; COPY [IMM32] BYTES FROM STACK-[PARAM1] TO [PARAM2]
    
	; Registers
	184		- REGS.OUT [PARAM1],[IMM16],[IMM16]	; SAVE REGISTER BLOCK BEGINNING AT [PARAM1] + [IMM16] FOR [IMM16] BYTES
	185		- REGS.IN [IMM16],[PARAM1],[IMM16]	; LOAD DATA INTO REGISTER BLOCK TO [IMM16] FROM [PARAM1] FOR [IMM16] BYTES
	186		- Nuserved
    
	; Flags
	187		- FLAG.SET [IMM8]					; SET FLAG BIT [IMM8]
	188		- FLAG.CLEAR [IMM8]					; CLEAR FLAG BIT [IMM8]
	189		- FLAG.TOGGLE [IMM8]				; TOGGLE FLAG BIT [IMM8]
	190		- FLAG.IN [SOURCE]					; COPY [SOURCE] TO FLAGS
	191		- FLAG.OUT [SOURCE]					; COPY FLAGS TO [SOURCE]
	192		- SET.C								; SET CARRY? FLAG
	193		- SET.O								; SET OVERFLOW? FLAG
	194		- SET.U								; SET UNDERFLOW? FLAG
	195		- SET.E								; SET EQUAL? FLAG
	196		- SET.Z								; SET ZERO? FLAG
	197		- SET.N								; SET NEGATIVE? FLAG
	198		- SET.P								; SET POSITIVE? FLAG
	199		- SET.A								; SET APP? FLAG
	
	200		- Nuserved
	201		- Nuserved
	202		- Nuserved
	203		- Nuserved
	204		- Nuserved
	205		- Nuserved
	206		- Nuserved
	207		- Nuserved
	208		- Nuserved
	209		- Nuserved
	210		- Nuserved
	211		- Nuserved
	212		- Nuserved
	213		- Nuserved

	; For preparing and calling snippets and parameter blocks
	214		- READY [PARAM1]					; Prepare a ready block pointing to [PARAM1]
	215		- READY.IN [PARAM1]					; Load the ready pointer
	216		- READY.OUT [PARAM1]				; Save the ready pointer
	217		- READY.OFFSET [PARAM1] [IMM16]		; Prepare a ready block pointing to [PARAM1] and set the ready offset to [IMM16]
	218		- SET.READY.OFFSET [IMM16]			; Set the ready offset to this location
	219		- SADD.READY.OFFSET [IMM16]			; Signed add N to ready.offset
	220		- SET.SKIP.8						; Skip 8-bits
	221		- SET.SKIP.16						; Skip 16-bits
	222		- SET.SKIP.32						; Skip 32-bits
	223		- SET.SKIP.64						; Skip 64-bits
	224		- SET.8 [PARAM1] [IMM16]			; Set 8-bits by [PARAM1] at the explicit [IMM16] offset
	225		- SET.16 [PARAM1] [IMM16]			; Set 16-bits by [PARAM1] at the explicit [IMM16] offset
	226		- SET.32 [PARAM1] [IMM16]			; Set 32-bits by [PARAM1] at the explicit [IMM16] offset
	227		- SET.64 [PARAM1] [IMM16]			; Set 64-bits by [PARAM1] at the explicit [IMM16] offset
	228		- SET.IMM64 [IMM64] [IMM16]			; Set the 64-bit immediate value at the explicit [IMM16] offset
	229		- SET.IMM32 [IMM32] [IMM16]			; Set the 32-bit immediate value at the explicit [IMM16] offset
	230		- SET.8 [PARAM1]					; Set the next 8-bits in the ready block
	231		- SET.16 [PARAM1]					; Set the next 16-bits in the ready block
	232		- SET.32 [PARAM1]					; Set the next 32-bits in the ready block
	233		- SET.64 [PARAM1]					; Set the next 64-bits in the ready block
	234		- SET.IMM64 [IMM64]					; Set the 64-bit immediate value
	235		- SET.IMM32 [IMM32]					; Set the 32-bit immediate value
	236		- GO.SN [PARAM1]					; Call snippet [PARAM1] with an implicit offset of 0
	237		- GO.DSN [PARAM1]					; Call dynamic snippet [PARAM1] with an implicit offset of 0
	238		- GO.SNO [PARAM1]:[PARAM2]			; Call snippet [PARAM1] with an explicit offset [PARAM2]
	239		- GO.DSNO [PARAM1]:[PARAM2]			; Call dynamic snippet [PARAM1] with an explicit offset [PARAM2]
	240		- GO.BACK							; Explicit return from a GO

	; Semaphore processing
	241		- SEMAPHORE.CREATE					; SEMAPHORE CREATE
	242		- SEMAPHORE.TRYLOCK [PARAM1]		; SEMAPHORE TRY LOCK, AND SET CARRY? FLAG IF FAILURE
	243		- SEMAPHORE.LOCK	[PARAM1]		; SEMAPHORE LOCK
	244		- SEMAPHORE.UNLOCK [PARAM1]			; SEMAPHORE UNLOCK
	245		- SEMAPHORE.DELETE [PARAM1]			; SEMAPHORE DELETE

	; Predicate population
	246		- PRED.LOAD4 [IMM16][4:REPEAT]		; USES AN EXTENDED PREDICATE FOR A HIGH COMBINATION OF EXPLICIT CONDITIONS
	247		- PRED.LOAD8 [PARAM1][8:REPEAT]		; COPIES 64-BIT QUANTITY INTO PRED REGISTER, AND INDICATES AN 8-BIT REPEAT COUNT
	248		- PRED.IMPORT						; IMPORTS LOWER 16 BITS OF FLAGS REGISTER INTO PRED
	
	; Preparing data for calling snippets
	249		- Nuserved
	250		- Nuserved
	251		- Nuserved
	252		- Nuserved

	; Other ISA emulation
	253		- X86 ISA EMULATION [PARAM1]		; An x86 32-bit assembly instruction block can be encoded and used
	254		- ARM ISA EMULATION [PARAM1]		; An ARM 32-bit assembly instruction block can be encoded and used
    
	; Extended instructions
	255		- EXTENDED INSTRUCTION BYTE FOLLOWS (TO BE DEFINED AND IMPLEMENTED LATER)

