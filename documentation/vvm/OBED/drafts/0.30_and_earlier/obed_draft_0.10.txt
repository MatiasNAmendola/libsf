+---------------------------------------+
|               OBED VM                 |
|                                       |
|  OBJECT/EVENT DRIVEN VIRTUAL MACHINE  |
|                                       |
|          SEPTEMBER 01, 2012           |
|          INITIAL DRAFT 0.10           |
|           BY RICK C. HODGIN           |
|                                       |
|   RELEASED FOR COMMUNITY DISCUSSION   |
|    A FUTURE DRAFT WILL REPLACE THIS   |
|     DRAFT, HOWEVER DEVELOPMENT HAS    |
|     BEGUN, AND WILL CONTINUE. -RCH    |
+----------------------------------------

+---------------------------------------+
|   A REQUEST IN PRAYER THROUGH FAITH   |
|---------------------------------------|
| MAY THE LORD, JESUS CHRIST, BLESS THE |
| WORK OF MY HANDS ON THIS PROJECT, AS  |
| I GIVE ALL CREDIT, HONOR AND GLORY TO |
| HIM.  AMEN.                           |
|---------------------------------------|
| MAY THE LORD, JESUS CHRIST, BLESS THE |
| WORK OF ALL HANDS ON THIS PROJECT, AS |
| WE GIVE ALL CREDIT, HONOR AND GLORY   |
| TO HIM.  AMEN.                        |
+---------------------------------------+



OBJECT EVENT DRIVEN VIRTUAL MACHINE (OBED)
------------------------------------------
MACHINE BOOTS UP WITH A MEMORY BUFFER BEGINNING
AT OFFSET 0.  INSTANTIATES WITH A SINGLE PROGRAM
OBJECT, WHICH POINTS TO AN INITIAL ENVIRONMENT.
THIS PROGRAM WAS PREVIOUSLY COMPILED FOR EXECUTION
ON THE OBED VM.  IT IS AN RXML FILE THAT CONTAINS
SPECIFIC INFORMATION FOR LOADING INTO THE OBED VM.

VARIABLE DEFINITIONS
--------------------
ALL OBED VM NAMES ARE PREFIXED WITH A FOUR-CHARACTER
SEQUENCE IDENTIFYING THEIR TYPE AND LOCALITY.

EXAMPLE:  p,l,g,r			= PARAMETER, LOCAL, GLOBAL AND RETURN
          s08,s16,s32,s64	= SIGNED 8-BIT, 16-BIT, 32-BIT AND 64-BIT
          u08,u16,u32,u64	= UNSIGNED 8-BIT, 16-BIT, 32-BIT AND 64-BIT
          f32,f64			= FLOATING POINT 32-BIT, 64-BIT

NOTE:  These are defined in the code executed on the VM.
       The IDE can use any variable name to hide this requirement
       and allow for other variable forms.  An example of a
       simplified variable name:
              OBED VM SEES:  ls64Foo
              SHOWN IN IDE:  foo or lnFoo

GLOBAL OBJECTS
--------------
	prg								-- A running program
	thr								-- Thread (child of PRG) 
	sta								-- Stack
	tmr								-- Timer
	gui								-- Graphical User Interface
	com								-- Communications object
	scr								-- Screen (child of GUI)
	cvs								-- Canvas (child of SCREEN)

OBJECT DETAILS
--------------
	gui								-- User Interface object, everything the VM is aware of for input
	gui._kbd						-- Stores keystroke information
	gui._mou						-- Stores mouse information

	tmr								-- Global timer object
	tmr._0.nam						-- Name of the first global timer
	tmr._0.enabled					-- Is this item enabled?
	tmr._0.interval					-- length of time in milliseconds between triggers
	tmr._0.timerSnippet				-- Code snippet to execute upon timer trigger

	com								-- Communications object
	com._ip4						-- IPv4 network communication (to be defined later)
	com._ip6						-- IPv6 network communication (to be defined later)
	
	prg								-- Global program object
	prg.sta							-- Stack
	prg.glo							-- Global variable definitions
	prg.snp							-- All code snippets known to the executing environment
	prg.dyn							-- All code snippets that are loaded dynamically while running in the executing environment
	prg.glo._N.nam					-- global variable definition for data quantities referenced in snippets
	prg.snp._N.nam					-- Name of the code snippet which exists in the project / program
	prg.dyn._N.nam					-- Name of the dynamic code snippet which exists in the loaded module

	thr._0							-- First thread
	thr._0.threadName				-- First thread, name of this thread (if specified)
	thr._0.tmr._0.nam				-- First thread, first timer for the thread
	thr._0.snp						-- First thread, executing code snippet (program, function, method, event, etc.)
	thr._0.exception				-- First thread, exception snippet to call if error
	thr._0.parameters				-- First thread, parameters
	thr._0.locals					-- First thread, local variables
	thr._0.registers				-- First thread, register space
	thr._0.scratch					-- First thread, scratch space
	
	As each thread calls child functions, is interrupted by a timer, whatever it is, these objects are added:
	x.snp.call.snp					-- On this thread, an explicit call was made, the result of source code
	x.snp.event.snp					-- On this thread, an implicit call was made, the result of an event
	
	Subsequent calls are treed like this:
	snp.call.call.snp				-- Another explicit call
	snp.call.event.snp				-- An event occurred after an explicit call
	snp.event.call.snp				-- An explicit call was made after an event was triggered
	snp.event.event.snp				-- A secondary event occurred after a primary event
		and so on...				-- every call or event triggers the addition of a new child level
	
	Every child thread level has inherited the same items:
	thr._N.x.exception				-- (if defined) exception snippet to call if error (if not defined, uses parent's exception)
	thr._N.x.parameters				-- parameters
	thr._N.x.locals					-- local variables
	thr._N.x.registers				-- register space (inherits an exact copy of caller's registers)
	thr._N.x.scratch				-- scratch space (inherits an exact copy of caller's scratch space)

VARIABLES
---------
	x.var.nam						-- Name and value of variable in ASCII
	x.var._uni						-- (if defined) name of the variable in UNICODE
	x.var._xunderflow				-- (If defined) Exception to trigger on variable underflow
	x.var._xoverflow				-- (If defined) Exception to trigger on variable overflow
	x.var._min						-- (If defined) Minimum value that can be stored in this value
	x.var._max						-- (If defined) Maximum value that can be stored in this value

INSTANTIATES WITH THE SPECIFIED NUMBER OF SCREEN OBJECTS, ALWAYS HAS AT LEAST ONE WITH ONE CANVAS, WHICH POINTS TO AN INITIAL ENVIRONMENT:
	scr._0.cvs
	scr._0.caption

EACH SCREEN OBJECT INSTANTIATES WITH A CHILD CANVAS OBJECT, WHICH POINTS TO AN INITIAL ENVIRONMENT:
	cvs.left						-- Left coordinate on parent canvas
	cvs.top							-- Top coordinate on parent canvas
	cvs.width						-- Width of the canvas
	cvs.height						-- Height of the canvas
	cvs.bitBuffer					-- Pointer to 32-bit bit buffer for this canvas
	cvs.renderSnippet				-- Code to call to render this canvas
	cvs.parentCanvas				-- The canvas object this item is a child of

THINGS
------
	A THING IS THE LOWEST LEVEL PRIMITIVE FOR STORING SOMETHING.  IT ALWAYS EXISTS ON AN OBJECT, ITS PARENT.
	A THING CONTAINS A NAME AND ASSOCIATED DATA.
	SINCE OBED IS OBJECT EVENT DRIVEN, EVERYTHING HAS A NAME.
	EVERY NAME HAS A LENGTH AND THE ASCII NAME BYTES.
	EVERY NAME CAN HAVE AN OPTIONAL UNICODE NAME.
	ALL DATA HAS A LENGTH AND THE DATA BYTES.

OBJECTS
-------
	EVERY OBJECT IS A CONTAINER.
	EVERY OBJECT HAS NEXT, PREV WHICH POINT TO ITS SIBLINGS.
	EVERY OBJECT HAS PARENT, FIRST CHILD WHICH POINT TO ITS LINEAGE.
	EVERY OBJECT HAS A FIRST THING WHICH CONTAINS ATTRIBUTE ITEMS FOR THE OBJECT, INCLUDING BASICS LIKE A NAME.

MEMORY
------
	ALL MEMORY IS LINEAR.  NO PAGING.  NO SWAPPING TO DISK.  THIS IS HANDLED BY THE HOST OS AS NEEDED.
	MEMORY IS INITIALLY ALLOCATED BEGINNING AT OFFSET 0 FOR SOME SIZE (A VM INSTANCE SETTING, MINIMUM OF 4 MB).
	THE VM CAN LAUNCH PAUSED WITH NO PROGRAM TO RUN.  FROM THERE, PRIOR SAVED SESSIONS CAN BE RESTORED.
	THE PROGRAM TO RUN IS LOADED BEGINNING AT THAT LOCATION.
	ONCE LOADED CONTROL IS TRANSFERRED TO THE INSTRUCTION AT OFFSET 0.

	VARIOUS FIXED INTERNAL OBJECTS ARE MAINTAINED OUTSIDE OF MAIN MEMORY WHICH HOLD
	INFORMATION ABOUT THE RUNNING VM.  THESE ARE QUERIED BY THE HOST AND GUEST THROUGH
	A SPECIAL API.

	DYNAMIC CODE CAN BE LOADED AND IS UPDATED IN THE FIXED INTERNAL OBJECTS, AND IS
	STORED IN THE AREAS OF AVAILABLE MEMORY.

	EVERY OBJECT HAS A POINTER TO THE START OF THE NAME, OR START OF ASSOCIATED DATA.
	ALL REFERENCES TO EVERY THING WHICH EXIST ARE BY OBJECT NAMES.

EDIT-AND-CONTINUE
-----------------
	ALL CODE SUPPORTS EDIT-AND-CONTINUE.
	A THREAD CAN BE PAUSED, CODE CHANGED/REPLACED, AND THEN RESUMED ON A RUNNING VM.  IF OBED VM
    IDENTIFIES THAT ITEMS BEING UPDATED ARE IN USE IN OTHER THREADS, THOSE THREADS ARE SUSPENDED
    AUTOMATICALLY WHILE THE UPDATE TAKES PLACE.  THIS IS SUPPORTED USING THIS MODEL:

		LINE 1	-	JUMPS TO SNIPPET FOR LINE 1
					EXECUTES THAT LINE'S SNIPPET
                    JUMPS TO START OF LINE 2
		LINE 2	-	JUMPS TO SNIPPET FOR LINE 2

		PROCESS REPEATS FOR EACH SUCCESSIVE LINE.

	WHEN CHANGES ARE MADE, THE PROGRAM PORTIONS FOR EACH LINE ARE CHANGED,
	WITH NEW LINES BEING INSERTED, DELETED LINES BEING REMOVED, ETC.

	BY MAINTAINING THIS LINE-TO-SNIPPET RELATIONSHIP, EDIT-AND-CONTINUE
	BECOMES VERY EASY TO IMPLEMENT.  HOWEVER, THIS IS NOT THE ONLY MODEL.
	THE ENTIRE ABI CAN BE SWAPPED OUT AND REPLACED AS NECESSARY, PROVIDED
	THE INTEGRITY OF THE ENTIRE MACHINE STATE IS MAINTAINED.

REGISTERS
------------------------------------------
	REGISTERS ARE AUTOMATICALLY ALLOCATED FOR EACH CALLED SNIPPET.
	REGISTERS ARE RELATIONAL TO ONE ANOTHER IN THE SAME PHYSICAL REGISTER SPACE.
	THE LOWER 8-BITS ARE THE BASE.
	EACH SUCCESSIVE LARGER SIZE REGISTER INCLUDES THE LOWER REGISTER, PLUS NEW SPACE.
	HERE WE SEE BIT POSITIONS FOR REGISTERS.

     ___________________________________ _________________ ________ ________
    |                 X64               |       X32       |  X16   |   X8   |
    |........|........|........|........|........|........|........|........|
    63                                32                16        8        0

     ___________________________________ _________________ ________ ________
    |                FX64               |                FX32               |
    |........|........|........|........|........|........|........|........|
    63                                32                                   0

				INTEGER					FLOATING POINT
				---------------			--------------
	0000	-	A8	A16	A32	A64			FA32	FA64
	0001	-	B8	B16	B32	B64			FB32	FB64
	0010	-	C8	C16	C32	C64			FC32	FC64
	0011	-	D8	D16	D32	D64			FD32	FD64
	0100	-	E8	E16	E32	E64			FE32	FE64
	0101	-	F8	F16	F32	F64			FF32	FF64
	0110	-	G8	G16	G32	G64			FG32	FG64
	0111	-	H8	H16	H32	H64			FH32	FH64
	1000	-	I8	I16	I32	I64			FI32	FI64
	1001	-	J8	J16	J32	J64			FJ32	FJ64
	1010	-	K8	K16	K32	K64			FK32	FK64
	1011	-	L8	L16	L32	L64			FL32	FL64
	1100	-	M8	M16	M32	M64			FM32	FM64
	1101	-	N8	N16	N32	N64			FN32	FN64
	1110	-	O8	O16	O32	A64			FO32	FO64
	1111	-	P8	P16	P32	P64			FP32	FP64

	OTHER REGISTERS (ACCESSIBLE ONLY BY SPECIAL INSTRUCTIONS)
	---------------------------------------------------------
		FLAG	- FLAGS
		IP64	- INSTRUCTION POINTER
		SP32	- STACK POINTER
		CT32	- CURRENT THREAD NUMBER
		XS32	- EXCEPTION SNIPPET NUMBER
		PO32	- PARENT PROGRAM OBJECT NUMBER
		CO32	- CURRENT PROGRAM OBJECT NUMBER

SCRATCH SPACE
-------------
	DEFAULT:  256 BYTES
	          (SIXTY-FOUR 32-BIT QUANTITIES)
	SCRATCH MEMORY SPACE IS ALLOCATED FOR EVERY CALLED SNIPPET.
	IT IS USED TO BUILD VALUES THAT ARE THE RESULT OF A SOURCE
    LINE BEFORE STORING TO A REGISTER OR VARIABLE.
	THE COMPILER OR ASSEMBLY PROGRAMMER USES THIS SPACE INTELLIGENTLY
    FOR INSTRUCTION EXECUTION.

FLAGS
---------------
	00000001	- CARRY?
	00000010	- OVERFLOW?
	00000100	- UNDERFLOW?
	00001000	- EQUAL?
	00010000	- ZERO?
	00100000	- RESERVED
	01000000	- RESERVED
	10000000	- APP - AVAILABLE TO APPLICATION

INSTRUCTION FORMAT
------------------
[4:PREDICATE] IS USED IF MOST SIGNIFICANT BIT OF INSTRUCTION BYTE IS SET
	0000	- None
	0001	- CARRY?
	0010	- !CARRY?
	0011	- EQUAL?
	0100	- !EQUAL?
	0101	- ZERO?
	0110	- !ZERO?
	0111	- ABOVE?
	1000	- !ABOVE?
	1001	- BELOW?
	1010	- !BELOW?
	1011	- OVERFLOW?
	1100	- !OVERFLOW?
	1101	- UNDERFLOW?
	1110	- !UNDERFLOW?
	1111	- APP?
	
[4:SOURCES]
	0001	- LITERAL           [4:SIZE]
	0010	- [INDIRECT32+REG]  [4:SIZE]
	0011	- [INDIRECT64+REG]  [4:SIZE]
	0100	- STACK				[4:SIZE][16:OFFSET]
	0101	- RESERVED
	0110	- PARAMETERS        [8:NUMBER]
	0111	- LOCAL             [16:NUMBER]
	1000	- GLOBALS           [32:NUMBER]
	1001	- SCRATCH           [4:SIZE][8:OFFSET]
	1010	- OBJECT            [32:NUMBER]
	1011	- ASCII OBJECT      [8:LENGTH][N:NAME]
	1100	- UNICODE OBJECT    [8:LENGTH][N*2:NAME]
	1101	- [OBJECT]			[32:NUMBER]
	1110	- [ASCII OBJECT]	[8:LENGTH][N:NAME]
	1111	- [UNICODE OBJECT]	[8:LENGTH][N*2:NAME]
	
	SIZE PARAMETERS
	---------------
	[4:SIZE] =	0000	8-bit signed integer
				0001	16-bit signed integer
				0010	32-bit signed integer
				0011	64-bit signed integer
				0100	32-bit floating point
				0101	64-bit floating point
				0110	RESERVED
				0111	RESERVED
				1000	8-bit unsigned integer
				1001	16-bit unsigned integer
				1010	32-bit unsigned integer
				1011	64-bit unsigned integer
				1100	8-bit immediate
				1101	16-bit immediate
				1110	32-bit immediate
				1111	64-bit immediate

[8:INSTRUCTION]
							

INSTRUCTION SET (OPCODE BYTE VALUES TO BE DEFINED LATER)
--------------------------------------------------------
	x0000000	- ADD
	x0000000	- SUBTRACT
	x0000000	- MULTIPLY
	x0000000	- DIVIDE
	x0000000	- COMPARE
	x0000000	- COPY
	x0000000	- MOVE
	x0000000	- EXCHANGE
	x0000000	- EXCHANGE AND ADD
	x0000000	- EXCHANGE AND MULTIPLY
	x0000000	- AND
	x0000000	- OR
	x0000000	- NOT
	x0000000	- XOR
	x0000000	- NEG
	x0000000	- INCREMENT
	x0000000	- DECREMENT
	x0000000	- SHIFT LEFT
	x0000000	- SHIFT RIGHT UNSIGNED
	x0000000	- SHIFT RIGHT SIGNED
	x0000000	- ROTATE LEFT
	x0000000	- ROTATE RIGHT
	x0000000	- CONVERT x TO y [TAKES SIZE AND CONVERTS TO NEW SIZE]

	x0000000	- DEBUG
	x0000000	- HALT
	x0000000	- NO OPERATION	[USED FOR PADDING]
    
	x0000000	- ADDRESS OF OBJECT NUMBER
	x0000000	- ADDRESS OF OBJECT ASCII NAME
	x0000000	- ADDRESS OF OBJECT UNICODE NAME
	x0000000	- GET NEXT UNIQUE NAME
	
	x0000000	- JUMP TO SNIPPET + OFFSET
	x0000000	- JUMP FORWARD
	x0000000	- JUMP BACKWARD
    
	x0000000	- CALL HOST NUMBER
	x0000000	- CALL HOST NAME
	x0000000	- CALL SNIPPET NUMBER
	x0000000	- CALL SNIPPET NAME
	x0000000	- CALL DYNAMIC SNIPPET NUMBER
	x0000000	- CALL DYNAMIC SNIPPET NAME

	x0000000	- PUSH
	x0000000	- POP
	x0000000	- STACK COPY
	
	x0000000	- RETURN
	x0000000	- RETURN TO OBJECT NAME IN PARENT LINEAGE
    
	x0000000	- SET CARRY?
	x0000000	- CLEAR CARRY?
	x0000000	- SET OVERFLOW?
	x0000000	- CLEAR OVERFLOW?
	x0000000	- SET UNDERFLOW?
	x0000000	- CLEAR UNDERFLOW?
	x0000000	- SET EQUAL?
	x0000000	- CLEAR EQUAL?
	x0000000	- SET ZERO?
	x0000000	- CLEAR ZERO?
	x0000000	- SET APP?
	x0000000	- CLEAR APP?
    
	x0000000	- RENDER CANVAS NUMBER
	x0000000	- RENDER CANVAS NAME
	x0000000	- RENDER CANVAS NUMBER USING SNIPPET NUMBER
	x0000000	- RENDER CANVAS NUMBER USING SNIPPET NAME
	x0000000	- RENDER CANVAS NAME USING SNIPPET NUMBER
	x0000000	- RENDER CANVAS NAME USING SNIPPET NAME
    
	x0000000	- OBJECT ADD AS PARENT
	x0000000	- OBJECT ADD AS CHILD
	x0000000	- OBJECT ADD AS PREV
	x0000000	- OBJECT ADD AS NEXT
	x0000000	- OBJECT STORE ASCII NAME
	x0000000	- OBJECT STORE UNICODE NAME
	x0000000	- OBJECT STORE DATA
	x0000000	- OBJECT PRUNE
	x0000000	- OBJECT GRAFT
    
	x0000000	- OBJECT ISCATTER  TO NUMBER, START, COUNT
	x0000000	- OBJECT ISCATTER  TO NAME,   START, COUNT
	x0000000	- OBJECT FSCATTER  TO NUMBER, START, COUNT
	x0000000	- OBJECT FSCATTER  TO NAME,   START, COUNT
	x0000000	- OBJECT IGATHER FROM NUMBER, START, COUNT
	x0000000	- OBJECT IGATHER FROM NAME,   START, COUNT
	x0000000	- OBJECT FGATHER FROM NUMBER, START, COUNT
	x0000000	- OBJECT FGATHER FROM NAME,   START, COUNT
    
	x0000000	- TIMER ADD GLOBAL
	x0000000	- TIMER ADD THREAD
	x0000000	- TIMER DELETE GLOBAL
	x0000000	- TIMER DELETE THREAD
	x0000000	- TIMER ENABLE GLOBAL
	x0000000	- TIMER ENABLE THREAD
	x0000000	- TIMER DISABLE GLOBAL
	x0000000	- TIMER DISABLE THREAD
    
	x0000000	- WAIT FOR NEXT EVENT

	x0000000	- EXCEPTION SET SNIPPET              [32:NUMBER]
	x0000000	- EXCEPTION TRIGGER                  [32:NUMBER]
	x0000000	- EXCEPTION TRIGGER EXPLICIT SNIPPET [32:NUMBER]
    
	x0000000	- THREAD ADD
	x0000000	- THREAD ASCRIBE AFFINITY [8:CPU]
	x0000000	- THREAD TERMINATE SELF
	x0000000	- THREAD TERMINATE [32:NUMBER]
	x0000000	- THREAD PAUSE SELF
	x0000000	- THREAD PAUSE  [32:NUMBER]
	x0000000	- THREAD RESUME [32:NUMBER]
	x0000000	- THREAD JOIN [32:NUMBER]
    
	x0000000	- SEMAPHORE CREATE
	x0000000	- SEMAPHORE LOCK
	x0000000	- SEMAPHORE UNLOCK
	x0000000	- SEMAPHORE DELETE

	x1111111	- EXTENDED INSTRUCTION BYTE FOLLOWS (TO BE DEFINED / ADDED LATER)
				EXAMPLES:
					SINE
					COSINE
					TANGENT
					ARCSINE
					ARCCOSINE
					ARCTANGENT
					SQUARE ROOT
					ROUND

