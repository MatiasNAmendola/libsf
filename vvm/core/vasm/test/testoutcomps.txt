//////////
//
// /libsf/vvm/vasm/test/test.vasm
//
//////
// Version 0.60
// Copyright (c) 2012 by Rick C. Hodgin
//////
// Last update:
//     December 10, 2012
//////
// Change log:
//     November 13, 2012 - Initial creation
//     December 10, 2012 - Continued development
//////
// Test VVM Assembler file, tests all functionality of the assembler.
// See devhelp.txt.
//////
//
// This software is released as Liberty Software under a Repeat License, as governed
// by the Public Benefit License v1.0 or later (PBL).
//
// You are free to use, copy, modify and share this software.  However, it can only
// be released under the PBL version indicated, and every project must include a copy
// of the pbl.txt document for its version as is at http://www.libsf.org/licenses/.
//
// For additional information about this project, or to view the license, see:
//
//     http://www.libsf.org/
//     http://www.libsf.org/licenses/
//     http://www.visual-freepro.org
//     http://www.visual-freepro.org/blog/
//     http://www.visual-freepro.org/forum/
//     http://www.visual-freepro.org/wiki/
//     http://www.visual-freepro.org/wiki/index.php/PBL
//     http://www.visual-freepro.org/wiki/index.php/Repeat_License
//
// Thank you.  And may The Lord bless you richly as you lift up your life, your
// talents, your gifts, your praise, unto Him.  In Jesus' name I pray.  Amen.
//
// @Author			Rick C. Hodgin
// @Date			November 16, 2012
// @Version			0.60
//
// Predicates (lower-case means false, upper-case means true, or a ! prefix also means not):
//		[z]		- zero?
//		[c]		- carry?
//		[e]		- equal?
//		[u]		- underflow?
//		[o]		- overflow?
//		[n]		- negative?
//		[p]		- positive?
//		[a]		- app?
//		[a3]	- app3?
//
// Examples:
//		[CN]	- carry? and negative?
//		[Cp]	- carry? and not positive?
//		et cetera
//
// To repeat a predicate over the next three instructions, use:
//		[Z]:3	- zero? will be tested for the next three instructions
//
//




// Include file
include		"c:\libsf\vvm\vasm\test\testout.vasm"
//////////
// Global Variables
//////
	u32		foo[10]					= 1, 2, 3, 4, 5, 6
	s8		someString[]			= "Hi, mom!"
	s32		gnFlag
	u32		lnHwnd.range(0..50)		= 0




DSNIP_DLL \libsf\vvm\user32.dll

	DLL_FUNCTION SendMessage
		|PARAMS		u32 hwnd, u32 msg, u32 w, u32 l
		|RETURN		u32

	DLL_FUNCTION GetClientRect
		|PARAMS		u32 hwnd, u32* rc
		|RETURN		u32

	DLL_FUNCTION OtherFunction
		|PARAMS		u32 foo

END




DSNIP_BXML d:\path\to\runtime\loadable.bxml, loadable.bxml
	|PROTOTYPE c:\path\to\devtime\loadable.bxml
END




FUNCTION test_uadd
	|PARAMS u32 p1, u32 p2, u32 p3, u32 p4, u32 p5
	|RETURN u32 r1, u32 r2
	|LOCALS u32 lnI, u32 lnJ, u32 k

			uadd64		[a][0],fb+fc
			uadd64		fb+fc,[h][0]
			uadd64		[a][c],result
			uadd64		result,[j][j]
			return
END


// Macros or constants
define		user32		user32.dll




//////////
// Global Variables
//////
	u32		foo[10]					= 1, 2, 3, 4, 5, 6
	s8		someString[]			= "Hi, mom!"
	s32		gnFlag
	u32		lnHwnd.range(0..50)		= 0




DSNIP_DLL "/path/to/user32.dll"

	DLL_FUNCTION SendMessage
		|PARAMS		u32 hwnd, u32 msg, u32 w, u32 l
		|RETURNS	u32

	DLL_FUNCTION GetClientRect
		|PARAMS		u32 hwnd, u32* rc
		|RETURNS	u32

	DLL_FUNCTION OtherFunction
		|PARAMS		u32 foo

END




DSNIP_BXML "d:\path\to\runtime\loadable.bxml", "loadable.bxml"
	|PROTOTYPE "c:\path\to\devtime\loadable.bxml"
END




FUNCTION test_uadd
	|PARAMS  u32 p1, u32 p2, u32 p3, u32 p4, u32 p5
	|RETURNS u32 r1, u32 r2
	|LOCALS  u32 lnI, u32 lnJ, u32 k

			uadd64		a,b
			uadd64		fc,fc

// Skip over the next uadd64 instruction
			adjip		@F
			uadd64		result,20
:@@
			uadd64		20,result
			uadd64		sp[0],result
			uadd64		result,sp[0]
			uadd64		sbd[b],c
			uadd64		c,sbd[b]

			move32		b,2
			calldsn		k, SendMessage, lnHwnd, foo[0], foo[b], fa

// Recurisvely call this function, but go straight to :foo label, bypassing earlier instructions
			callsn		r1, r2, test_uadd:foo, p1, p2, p3, p4, p5

// Repeat five times
			move64		c,5
:@@
			uadd64		f,param[0]
			uadd64		param[0],fa+fc
			dec64		c
	[!z]	adjip		@B

			adjip		foo
:foo
			uadd64		g,return[0]
			uadd64		return[0],sp[0]
			uadd64		h,local[0]
			uadd64		local[0],global[4]
			uadd64		object[0],result
			uadd64		result,object[0]
			uadd64		i+j,result
			uadd64		fa+fj,b+c
			uadd64		d+e,fb+fl
			uadd64		[a][0],fb+fc
			uadd64		fb+fc,[h][0]
			uadd64		[a][c],result
			uadd64		result,[j][j]
			return
END
