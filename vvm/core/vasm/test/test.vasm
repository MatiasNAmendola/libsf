//////////
//
// /libsf/vvm/vasm/test/test.vasm
//
//////
// Version 0.70
// Copyright (c) 2012, 2014 by Rick C. Hodgin
//////
// Last update:
//     Feb.25.2014
//////
// Change log:
//     Feb.25.2014 - Development on 0.70 begins
//     Dec.10.2012 - Continued development
//     Nov.13.2012 - Initial creation
//////
// Test VVM Assembler file, tests all functionality of the assembler.
// See devhelp.txt.
//////
//
// This software is released as Liberty Software under a Repeat License, as governed
// by the Public Benefit License v1.0 or later (PBL).
//
// You are free to use, copy, modify and share this software.  However, it can only
// be released under the PBL version indicated, and every project must include a copy
// of the pbl.txt document for its version as is at http://www.libsf.org/licenses/.
//
// For additional information about this project, or to view the license, see:
//
//     http://www.libsf.org/
//     http://www.libsf.org/licenses/
//     http://www.visual-freepro.org
//     http://www.visual-freepro.org/blog/
//     http://www.visual-freepro.org/forum/
//     http://www.visual-freepro.org/wiki/
//     http://www.visual-freepro.org/wiki/index.php/PBL
//     http://www.visual-freepro.org/wiki/index.php/Repeat_License
//
// Thank you.  And may The Lord bless you richly as you lift up your life, your
// talents, your gifts, your praise, unto Him.  In Jesus' name I pray.  Amen.
//
// @Author			Rick C. Hodgin
// @Date			Feb.25.2014
// @Version			0.70
//
// Predicates (lower-case means false, upper-case means true, or a ! prefix also means not):
//		[c]		- carry?
//		[e]		- equal?
//		[a]		- app?
//		[a3]	- app3?
//
// Examples:
//		[C A3]	- carry? and app3?
//		[e]		- not equal?
//		et cetera
//
// To repeat a predicate over the next three instructions, use:
//		[Z]:3	- zero? will be tested for the next three instructions
//
//




// Include file
(|include|c:\libsf\vvm\vasm\test\testout.vasm||)


// Macros
[|macro| [|token|user32||] [|swap|user32.dll||] ||]


// Global Variables
[|u32|10,foo, [|init|1, 2, 3, 4, 5, 6||] ||]
[|s8|someString, [|init|"Hi, mom!"||] ||]
[|s32|gnFlag||]
[|u32|lnHwnd, [|min|0||] [|max|50||] [|init|0||] ||]


[|dsnip|dll,~user32~||]
[|dll_function|SendMessage||]
[|params| [|u32|hwnd||] [|u32|msg||] [|u32|w||] [|u32|l||] ||]
[|returns| [|u32|r1||] ||]

[|dll_function|GetClientRect
[|params| [|u32|hwnd||] [|u32*|rc||] ||]
[|returns| [|u32|r1||] ||]

[|dll_function|OtherFunction
[|params| u32 foo
[|end|]


[|dsnip|bxml,d:\path\to\runtime\loadable.bxml||]
[|prototype|c:\path\to\devtime\loadable.bxml||]
[|end|]


(|source|c:\path\program.bxml::test_uadd||)
(|line|1,FUNCTION test_uadd||)
[|snip|test_uadd||]
(|line|2,LPARAMETERS p1, p2, p3, p4, p5||)
[|params| [|u32|p1||] [|u32|p2||] [|u32|p3||] [|u32|p4||] [|u32|p5||] ||]
(|line|3,RETURNS r1, r2||)
[|returns| [|u32|r1||] [|u32|r2||] ||]
(|line|4,LOCALS lnI, lnJ, k||)
[|locals| [|u32|lnI||] [|u32|lnJ||] [|u32|k||] [|u8|20,_sendMessageParams||] ||]

(|line|6,lnC = lnA + lnB||)
			add.s32		lnA,lnB							(|i|6,9||)
			move.s32	lnC,result						(|i|0,5||)

(|line|7,k = MySendMessage(lnHwnd, foo[0], foo[lnB], fa)||)
			ready		_mySendMessageParams			(|i|-1||)
			set.32		&k								(|i|0,3||)
			set.32		lnHwnd							(|i|16,6||)
			set.32		foo[0]							(|i|24,6||)
			set.32		foo[lnB]						(|i|32,8||)
			set.32		fa								(|i|42,2||)
			go.dsn		SendMessage						(|i|4,11||)

(|line|8,RETURN||)
			go.back
[|end|]
