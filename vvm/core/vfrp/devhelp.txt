//////////
//
// /libsf/vvm/vvm/devhelp.txt
//
//////
// Version 0.70
// Copyright (c) 2012, 2014 by Rick C. Hodgin
//////
// Last update:
//     Mar.08.2014
//////
// Change log:
//     Mar.08.2014 - VVM refactored from VVM.EXE into VVM.DLL, and VFRP.EXE
//     Feb.25.2014 - Development on 0.70 begins
//     Mar.02.2013 - Added VVMT info (test cases)
//     Nov.28.2012 - Added VVMMC info
//     Nov.01.2012 - General notes, updated to reflect recent refactoring
//     Sep.29.2012 - PBL v1.0 license included directly in source files
//     Sep.26.2012 - Initial creation
//////
//
// This software is released as Liberty Software under a Repeat License, as governed
// by the Public Benefit License v1.0 or later (PBL).
//
// You are free to use, copy, modify and share this software.  However, it can only
// be released under the PBL version indicated, and every project must include a copy
// of the pbl.txt document for its version as is at http://www.libsf.org/licenses/.
//
// For additional information about this project, or to view the license, see:
//
//     http://www.libsf.org/
//     http://www.libsf.org/licenses/
//     http://www.visual-freepro.org
//     http://www.visual-freepro.org/blog/
//     http://www.visual-freepro.org/forum/
//     http://www.visual-freepro.org/wiki/
//     http://www.visual-freepro.org/wiki/index.php/PBL
//     http://www.visual-freepro.org/wiki/index.php/Repeat_License
//
// Thank you.  And may The Lord bless you richly as you lift up your life, your
// talents, your gifts, your praise, unto Him.  In Jesus' name I pray.  Amen.
//
//




//////////
// General notes
//////
	(1)  Tabs are 4 characters wide
	(2)  Visual Studio 2008 Professional was used to develop this system in Windows.
	(3)  Visual FreePro's own IDE, once completed in Windows, will be used to develop in Linux.
    (4)  Functions prepended with i are internal, they are not visible as exposed functions to the outside world.
    (5)  Functions prepended with ii are internal to internal functions, they should never be called directly,
         and bypass what may seem like otherwise proper pointer validation (for the sake of speedups).



//////////
// Add a new VVM function to support debuggers
//////
    (1)  common_vvm.h       - VVM related function prototyping and definition
    (2)  vvm_defs.h         - Function prototyping
    (3)  vvm_vo.cpp         - vvm_debuggerInterface(), to setup known function interface by external names (for both VVM and VVMOSS)
    (4)  vvm1.cpp           - VVM interface functions
    (5)  common.h           - SCallback definitions




//////////
// Add a new OSS (VVM Operating System Specific) function visible to VVM and debuggers
//////
    (1)  common_oss.h       - OSS related function prototyping and definition
    (2)  oss_defs.h          - Forward declarations
    (3)  oss.cpp             - Code definition
    (4)  oss.def             - Exports




//////////
// Add a new MC (VVM Machine Code) function visible to VVM and debuggers
//////
    (1)  common_mc.h        - MC related function prototyping and definition
    (2)  mc_defs.h          - Forward declarations
    (3)  mc.cpp             - Code definition
    (4)  mc.def             - Exports




//////////
// Add a new VVMT function visible to VVM and debuggers
//////
    (1)  common_vvmt.h      - VVMT related function prototyping and definition
    (2)  vvmt_defs.h        - Forward declarations
    (3)  vvmt.cpp           - Code definition
    (4)  vvmt.def           - Exports



//////////
// Plugins
//////

    //////////
    //
    // Sound plugin
    //
    // Note:  The easiest way to examine how this part of the program flows is to set a breakpoint
    //        in ioss_loadPlugins(), and then in oss_bootstrapInitialization() use the functions
    //        defined in ioss_loadPlugin_sound() in coordination with the public API functions
    //        exposed through the VVMOSS to step through.  It's really not that complex. It just
    //        might seem so at first. :-)
    //
    //////
        (1)  sound.h                - Header file for the sound plugin
        (2)  sound.cpp              - Source file for the sound plugin
        (3)  common_oss_plugins.h   - Common location for the function definitions to sound.cpp and vo.cpp.
        (4)  oss.cpp			    - Sound interface (oss_sound* functions)
        (5)  oss_plugins.h          - General VVMOSS plugins, including sound
        (6)  oss_plugins.cpp        - General VVMOSS plugins, including sound
